{"version":3,"sources":["../src/runtime/lesson/timeline.ts","../src/runtime/lesson/player.ts","../src/runtime/lesson/factories.ts","../src/runtime/inventory/inventory.ts","../src/runtime/editor/lessonEditor.ts","../src/runtime/materials/goldenBeads.ts","../src/runtime/materials/registry.ts","../src/runtime/scenarios/multiplication.ts","../src/runtime/storage/lessonDocument.ts","../src/runtime/storage/progress.ts"],"sourcesContent":["import type { LessonDocument, LessonSegment, SegmentTimeline } from '@monte/types';\n\nconst createEmptyTimeline = (): SegmentTimeline => ({\n  version: 1,\n  steps: [],\n});\n\nconst normalizeTimelineSteps = (timeline: SegmentTimeline | undefined): SegmentTimeline['steps'] =>\n  (timeline?.steps ?? []).map((step) => ({\n    ...step,\n    keyframes: step.keyframes ?? [],\n    interactions: step.interactions ?? [],\n  }));\n\nexport const normalizeSegmentTimeline = <T extends LessonSegment>(segment: T): T => {\n  const timeline = segment.timeline ?? createEmptyTimeline();\n  return {\n    ...segment,\n    timeline: {\n      version: timeline.version ?? 1,\n      label: timeline.label,\n      metadata: timeline.metadata,\n      steps: normalizeTimelineSteps(timeline),\n    },\n  };\n};\n\nexport const normalizeLessonDocumentTimelines = <T extends LessonDocument>(document: T): T => {\n  document.lesson.segments = document.lesson.segments.map((segment) => normalizeSegmentTimeline(segment));\n  return document;\n};\n","import { assign, createMachine } from 'xstate';\n\nexport type PlayerStatus = 'idle' | 'playing' | 'paused' | 'completed';\n\ninterface PlayerContext {\n  index: number;\n  total: number;\n  status: PlayerStatus;\n}\n\nexport type PlayerEvent =\n  | { type: 'PLAY' }\n  | { type: 'PAUSE' }\n  | { type: 'STOP' }\n  | { type: 'COMPLETE' }\n  | { type: 'NEXT' }\n  | { type: 'PREV' }\n  | { type: 'SET_INDEX'; index: number };\n\nconst clamp = (value: number, min: number, max: number) => Math.min(Math.max(value, min), max);\n\nexport const createLessonPlayerMachine = (totalSegments: number) =>\n  createMachine({\n    types: {} as {\n      context: PlayerContext;\n      events: PlayerEvent;\n    },\n    id: 'lessonPlayer',\n    context: {\n      index: 0,\n      total: Math.max(totalSegments, 0),\n      status: 'idle',\n    },\n    initial: 'idle',\n    states: {\n      idle: {\n        entry: assign(() => ({ status: 'idle' })),\n        on: {\n          PLAY: '#lessonPlayer.playing',\n        },\n      },\n      playing: {\n        entry: assign(() => ({ status: 'playing' })),\n        on: {\n          PAUSE: '#lessonPlayer.paused',\n          COMPLETE: [\n            {\n              guard: ({ context }) => context.index >= Math.max(context.total - 1, 0),\n              target: '#lessonPlayer.finished',\n            },\n            {\n              target: '#lessonPlayer.idle',\n              actions: assign(({ context }) => {\n                const lastIndex = Math.max(context.total - 1, 0);\n                return {\n                  index: Math.min(context.index + 1, lastIndex),\n                  status: 'idle',\n                };\n              }),\n            },\n          ],\n          NEXT: {\n            target: '#lessonPlayer.idle',\n            actions: assign(({ context }) => {\n              const lastIndex = Math.max(context.total - 1, 0);\n              return {\n                index: Math.min(context.index + 1, lastIndex),\n                status: 'idle',\n              };\n            }),\n          },\n          PREV: {\n            target: '#lessonPlayer.idle',\n            actions: assign(({ context }) => ({\n              index: Math.max(context.index - 1, 0),\n              status: 'idle',\n            })),\n          },\n        },\n      },\n      paused: {\n        entry: assign(() => ({ status: 'paused' })),\n        on: {\n          PLAY: '#lessonPlayer.playing',\n          STOP: '#lessonPlayer.idle',\n        },\n      },\n      finished: {\n        entry: assign(() => ({ status: 'completed' })),\n        type: 'final',\n        on: {\n          STOP: '#lessonPlayer.idle',\n        },\n      },\n    },\n    on: {\n      SET_INDEX: {\n        target: '#lessonPlayer.idle',\n        actions: assign(({ event, context }) => {\n          if (event.type !== 'SET_INDEX') return {};\n          return {\n            index: clamp(event.index, 0, Math.max(context.total - 1, 0)),\n            status: 'idle',\n          } satisfies Partial<PlayerContext>;\n        }),\n      },\n      PREV: {\n        target: '#lessonPlayer.idle',\n        actions: assign(({ context }) => ({\n          index: Math.max(context.index - 1, 0),\n          status: 'idle',\n        })),\n      },\n      NEXT: {\n        target: '#lessonPlayer.idle',\n        actions: assign(({ context }) => {\n          const lastIndex = Math.max(context.total - 1, 0);\n          return {\n            index: Math.min(context.index + 1, lastIndex),\n            status: 'idle',\n          };\n        }),\n      },\n      STOP: {\n        target: '#lessonPlayer.idle',\n        actions: assign(() => ({ status: 'idle' })),\n      },\n    },\n  });\n","import type {\n  GuidedEvaluatorId,\n  LessonDocument,\n  LessonScenarioBinding,\n  LessonSegment as LessonSegmentType,\n  PracticePassCriteria,\n  PracticeQuestion,\n  PresentationAction,\n  PresentationScript,\n  WorkspaceKind,\n} from '@monte/types';\n\ntype LessonSegment = LessonDocument['lesson']['segments'][number];\ntype PresentationSegment = Extract<LessonSegment, { type: 'presentation' }>;\ntype GuidedSegment = Extract<LessonSegment, { type: 'guided' }>;\ntype PracticeSegment = Extract<LessonSegment, { type: 'practice' }>;\ntype GuidedStepWithEvaluator = GuidedSegment['steps'][number];\n\nconst BEAD_PLACE_ORDER: Array<'thousand' | 'hundred' | 'ten' | 'unit'> = [\n  'thousand',\n  'hundred',\n  'ten',\n  'unit',\n];\n\nconst randomId = () => {\n  if (typeof crypto !== 'undefined' && 'randomUUID' in crypto) {\n    return crypto.randomUUID();\n  }\n  return Math.random().toString(36).slice(2, 10);\n};\n\nexport const generateId = (prefix: string) => `${prefix}-${randomId().slice(0, 8)}`;\n\nexport const createPresentationAction = (\n  type: PresentationAction['type'],\n  id: string = generateId(`action-${type}`),\n): PresentationAction => {\n  const common = {\n    id,\n    durationMs: undefined,\n    authoring: undefined,\n  } as const;\n\n  switch (type) {\n    case 'narrate':\n      return { ...common, type: 'narrate', text: '' };\n    case 'showCard':\n      return {\n        ...common,\n        type: 'showCard',\n        card: '',\n        position: 'paper',\n      };\n    case 'placeBeads':\n      return {\n        ...common,\n        type: 'placeBeads',\n        place: 'unit',\n        quantity: 1,\n        tray: 1,\n      };\n    case 'duplicateTray':\n      return {\n        ...common,\n        type: 'duplicateTray',\n        count: 2,\n      };\n    case 'exchange':\n      return {\n        ...common,\n        type: 'exchange',\n        from: 'unit',\n        to: 'ten',\n        quantity: 10,\n        remainder: 0,\n      };\n    case 'moveBeadsBelowLine':\n      return {\n        ...common,\n        type: 'moveBeadsBelowLine',\n        place: 'unit',\n        totalCount: 0,\n      };\n    case 'groupForExchange':\n      return {\n        ...common,\n        type: 'groupForExchange',\n        place: 'unit',\n        groupsOfTen: 0,\n        remainder: 0,\n      };\n    case 'exchangeBeads':\n      return {\n        ...common,\n        type: 'exchangeBeads',\n        from: 'unit',\n        to: 'ten',\n        groupsOfTen: 0,\n      };\n    case 'placeResultCard':\n      return {\n        ...common,\n        type: 'placeResultCard',\n        place: 'unit',\n        value: 0,\n      };\n    case 'stackPlaceValues':\n      return {\n        ...common,\n        type: 'stackPlaceValues',\n        order: [...BEAD_PLACE_ORDER],\n      };\n    case 'writeResult':\n      return {\n        ...common,\n        type: 'writeResult',\n        value: '',\n      };\n    case 'highlight':\n      return {\n        ...common,\n        type: 'highlight',\n        target: '',\n        text: '',\n      };\n    case 'showStamp':\n      return {\n        ...common,\n        type: 'showStamp',\n        stamp: '1',\n        columns: 1,\n        rows: 1,\n      };\n    case 'countTotal':\n      return {\n        ...common,\n        type: 'countTotal',\n        value: '',\n      };\n    default: {\n      const exhaustiveCheck: never = type;\n      throw new Error(`Unsupported presentation action: ${exhaustiveCheck as string}`);\n    }\n  }\n};\n\nexport const defaultPracticeQuestion = (): PracticeQuestion => ({\n  id: generateId('question'),\n  multiplicand: 100,\n  multiplier: 2,\n  prompt: 'Solve 100 Ã— 2.',\n  correctAnswer: 200,\n  difficulty: 'easy',\n  authoring: undefined,\n});\n\nexport const defaultPassCriteria: PracticePassCriteria = {\n  type: 'threshold',\n  firstCorrect: 2,\n  totalCorrect: 3,\n  maxMisses: 3,\n};\n\nexport const defaultGuidedStep = (\n  workspace: WorkspaceKind,\n): GuidedStepWithEvaluator => ({\n  id: generateId('step'),\n  prompt: 'Describe the guided action.',\n  expectation: 'Expectation description.',\n  successCheck: 'Success criteria.',\n  nudge: 'Helpful hint to guide the learner.',\n  explanation: undefined,\n  durationMs: undefined,\n  authoring: undefined,\n  evaluatorId: (workspace === 'stamp-game'\n    ? 'stamp-game-build'\n    : 'golden-beads-build-base') as GuidedEvaluatorId,\n});\n\nexport const createSegment = (\n  type: LessonSegment['type'],\n  defaultMaterialId: string,\n): LessonSegmentType => {\n  const baseId = generateId(`segment-${type}`);\n\n  if (type === 'presentation') {\n    const segment: PresentationSegment = {\n      id: baseId,\n      title: 'New presentation segment',\n      description: '',\n      type: 'presentation',\n      representation: 'concrete',\n      primaryMaterialId: defaultMaterialId,\n      materials: [],\n      skills: [],\n      scriptId: `script-${baseId}`,\n      script: {\n        id: `script-${baseId}`,\n        title: 'Presentation script',\n        summary: '',\n        actions: [createPresentationAction('narrate')],\n      },\n      scenario: { kind: 'golden-beads', seed: Date.now() },\n      materialBankId: undefined,\n      timeline: undefined,\n    };\n    return segment;\n  }\n\n  if (type === 'guided') {\n    const segment: GuidedSegment = {\n      id: baseId,\n      title: 'New guided segment',\n      description: '',\n      type: 'guided',\n      representation: 'concrete',\n      materials: [],\n      skills: [],\n      workspace: 'golden-beads',\n      steps: [defaultGuidedStep('golden-beads')],\n      scenario: { kind: 'golden-beads', seed: Date.now() },\n      materialBankId: undefined,\n      timeline: undefined,\n    };\n    return segment;\n  }\n\n  const segment: PracticeSegment = {\n    id: baseId,\n    title: 'New practice segment',\n    description: '',\n    type: 'practice',\n    representation: 'concrete',\n    materials: [],\n    skills: [],\n    workspace: 'golden-beads',\n    questions: [defaultPracticeQuestion()],\n    passCriteria: { ...defaultPassCriteria },\n    scenario: { kind: 'golden-beads', seed: Date.now() },\n    materialBankId: undefined,\n    timeline: undefined,\n  };\n  return segment;\n};\n\nexport const ensurePresentationScript = (segment: PresentationSegment): PresentationScript => {\n  if (!segment.script) {\n    segment.script = {\n      id: segment.scriptId ?? `script-${segment.id}`,\n      title: segment.title,\n      summary: '',\n      actions: [],\n    };\n  }\n  return segment.script;\n};\n\nexport const sanitizeScenario = (\n  scenario: LessonScenarioBinding | undefined,\n  fallbackKind: LessonScenarioBinding['kind'] = 'golden-beads',\n): LessonScenarioBinding => {\n  if (!scenario) {\n    return { kind: fallbackKind, seed: Date.now() };\n  }\n  return scenario;\n};\n","import type {\n  LessonDocument,\n  LessonMaterialInventory,\n  MaterialBankDefinition,\n  TokenTypeDefinition,\n  WorkspaceKind,\n} from '@monte/types';\n\nexport interface InventoryDelta {\n  tokenTypeId: string;\n  delta: number;\n  reason: 'consume' | 'replenish' | 'reset';\n  bankId?: string;\n  segmentId?: string;\n}\n\ninterface BankRuntimeState {\n  available: Record<string, number>;\n  initial: Record<string, number>;\n}\n\nexport type RuntimeInventoryState = {\n  banks: Record<string, BankRuntimeState>;\n};\n\nconst randomId = () => {\n  if (typeof crypto !== 'undefined' && 'randomUUID' in crypto) {\n    return crypto.randomUUID();\n  }\n  return Math.random().toString(36).slice(2, 10);\n};\n\nconst generateInventoryId = (prefix: string) => `${prefix}-${randomId()}`;\n\nexport const deriveAcceptedTokenIds = (\n  bank: MaterialBankDefinition,\n  inventory: LessonMaterialInventory,\n): string[] => {\n  if (bank.accepts.length > 0) {\n    return bank.accepts;\n  }\n  return inventory.tokenTypes.map((token) => token.id);\n};\n\nconst toRecord = (entries: Array<[string, number]>): Record<string, number> => {\n  const map: Record<string, number> = {};\n  entries.forEach(([key, value]) => {\n    map[key] = value;\n  });\n  return map;\n};\n\nconst createBankState = (\n  bank: MaterialBankDefinition,\n  inventory: LessonMaterialInventory,\n): BankRuntimeState => {\n  const tokenIds = deriveAcceptedTokenIds(bank, inventory);\n  const initialQuantity = bank.initialQuantity;\n  let initial: Record<string, number>;\n  if (typeof initialQuantity === 'number') {\n    initial = toRecord(tokenIds.map((id) => [id, initialQuantity]));\n  } else {\n    initial = { ...initialQuantity };\n  }\n\n  tokenIds.forEach((id) => {\n    if (typeof initial[id] !== 'number') {\n      initial[id] = 0;\n    }\n  });\n\n  return {\n    available: { ...initial },\n    initial,\n  };\n};\n\nexport const buildRuntimeState = (inventory: LessonMaterialInventory): RuntimeInventoryState => {\n  const banks: Record<string, BankRuntimeState> = {};\n  for (const bank of inventory.banks) {\n    banks[bank.id] = createBankState(bank, inventory);\n  }\n  return { banks };\n};\n\nconst summarizeDeltas = (deltas: InventoryDelta[]) => {\n  const summary = new Map<\n    string,\n    Map<\n      string,\n      {\n        net: number;\n        consumed: number;\n        replenished: number;\n      }\n    >\n  >();\n\n  for (const delta of deltas) {\n    if (!delta.bankId) continue;\n    if (delta.reason === 'reset') {\n      summary.delete(delta.bankId);\n      continue;\n    }\n    if (delta.tokenTypeId === '*') continue;\n    let bankSummary = summary.get(delta.bankId);\n    if (!bankSummary) {\n      bankSummary = new Map();\n      summary.set(delta.bankId, bankSummary);\n    }\n    const entry =\n      bankSummary.get(delta.tokenTypeId) ?? {\n        net: 0,\n        consumed: 0,\n        replenished: 0,\n      };\n    entry.net += delta.delta;\n    if (delta.reason === 'consume') {\n      entry.consumed += Math.abs(delta.delta);\n    } else if (delta.reason === 'replenish') {\n      entry.replenished += Math.abs(delta.delta);\n    }\n    bankSummary.set(delta.tokenTypeId, entry);\n  }\n\n  return summary;\n};\n\nexport type ConsistencyIssue = {\n  bankId: string;\n  tokenTypeId: string;\n  expected: number;\n  actual: number;\n};\n\nexport const detectInventoryConsistencyIssues = (\n  inventory: LessonMaterialInventory,\n  runtime: RuntimeInventoryState,\n  deltas: InventoryDelta[],\n): ConsistencyIssue[] => {\n  const issues: ConsistencyIssue[] = [];\n  const deltaSummary = summarizeDeltas(deltas);\n\n  for (const bank of inventory.banks) {\n    const runtimeBank = runtime.banks[bank.id];\n    if (!runtimeBank) continue;\n    const expectedTokens = new Set<string>([\n      ...Object.keys(runtimeBank.initial),\n      ...Object.keys(runtimeBank.available),\n    ]);\n    const accepted = deriveAcceptedTokenIds(bank, inventory);\n    accepted.forEach((tokenId) => expectedTokens.add(tokenId));\n\n    const bankSummary = deltaSummary.get(bank.id);\n\n    for (const tokenId of expectedTokens) {\n      const initial = runtimeBank.initial[tokenId] ?? 0;\n      const available = runtimeBank.available[tokenId] ?? 0;\n      const net = bankSummary?.get(tokenId)?.net ?? 0;\n      const expected = initial + net;\n      if (available !== expected) {\n        issues.push({\n          bankId: bank.id,\n          tokenTypeId: tokenId,\n          expected,\n          actual: available,\n        });\n      }\n    }\n  }\n\n  return issues;\n};\n\nexport const assertInventoryConsistency = (draft: LessonDocument) => {\n  const inventory = draft.lesson.materialInventory;\n  if (!inventory) return;\n  const tokenTypeIds = new Set(inventory.tokenTypes.map((token) => token.id));\n  const segmentIds = new Set(draft.lesson.segments.map((segment) => segment.id));\n\n  for (const bank of inventory.banks) {\n    const acceptedIds = bank.accepts.length > 0 ? bank.accepts : Array.from(tokenTypeIds);\n    for (const tokenId of acceptedIds) {\n      if (!tokenTypeIds.has(tokenId)) {\n        throw new Error(`Bank ${bank.id} references unknown token type ${tokenId}`);\n      }\n    }\n    if (bank.scope === 'segment') {\n      if (!bank.segmentId || !segmentIds.has(bank.segmentId)) {\n        throw new Error(`Bank ${bank.id} references unknown segment ${bank.segmentId ?? '(missing)'}`);\n      }\n    }\n  }\n\n  const bankIds = new Set(inventory.banks.map((bank) => bank.id));\n  for (const segment of draft.lesson.segments) {\n    if (segment.materialBankId && !bankIds.has(segment.materialBankId)) {\n      throw new Error(`Segment ${segment.id} references missing bank ${segment.materialBankId}`);\n    }\n  }\n};\n\nexport const createEmptyInventory = (): LessonMaterialInventory => ({\n  version: 1,\n  tokenTypes: [],\n  banks: [],\n});\n\nexport const createTokenType = (\n  partial: Partial<TokenTypeDefinition> &\n    Pick<TokenTypeDefinition, 'id' | 'materialId' | 'workspace' | 'label' | 'visual'>,\n): TokenTypeDefinition => ({\n  quantityPerToken: 1,\n  authoring: undefined,\n  ...partial,\n});\n\nconst defaultVisual = (workspace: WorkspaceKind): TokenTypeDefinition['visual'] => {\n  if (workspace === 'stamp-game') {\n    return { kind: 'stamp', value: 1 };\n  }\n  return { kind: 'bead', place: 'unit' };\n};\n\nexport const createDefaultTokenType = (\n  materialId: string,\n  workspace: WorkspaceKind,\n  label = 'New token type',\n): TokenTypeDefinition =>\n  createTokenType({\n    id: generateInventoryId('token'),\n    materialId,\n    workspace,\n    label,\n    visual: defaultVisual(workspace),\n  });\n\nexport const createMaterialBank = (\n  partial: Partial<MaterialBankDefinition> &\n    Pick<MaterialBankDefinition, 'id' | 'label' | 'scope' | 'materialId' | 'accepts'>,\n): MaterialBankDefinition => ({\n  segmentId: partial.scope === 'segment' ? partial.segmentId ?? undefined : undefined,\n  initialQuantity: 0,\n  depletion: 'consume',\n  layout: undefined,\n  metadata: undefined,\n  ...partial,\n});\n\nexport const createDefaultMaterialBank = (params: {\n  materialId: string;\n  scope?: MaterialBankDefinition['scope'];\n  segmentId?: string;\n  accepts?: string[];\n  label?: string;\n  initialQuantity?: number;\n}): MaterialBankDefinition =>\n  createMaterialBank({\n    id: generateInventoryId('bank'),\n    label: params.label ?? 'New material bank',\n    scope: params.scope ?? 'lesson',\n    segmentId: params.scope === 'segment' ? params.segmentId : undefined,\n    materialId: params.materialId,\n    accepts: params.accepts ?? [],\n    initialQuantity: params.initialQuantity ?? 0,\n  });\n\nexport const resolveBankQuantity = (bank: MaterialBankDefinition, tokenTypeId: string): number => {\n  if (typeof bank.initialQuantity === 'number') {\n    return bank.initialQuantity;\n  }\n  return bank.initialQuantity[tokenTypeId] ?? 0;\n};\n\nexport const removeTokenFromBank = (\n  bank: MaterialBankDefinition,\n  tokenTypeId: string,\n): MaterialBankDefinition => {\n  const accepts = bank.accepts.filter((id) => id !== tokenTypeId);\n  if (typeof bank.initialQuantity === 'number') {\n    return { ...bank, accepts };\n  }\n  const restQuantities = { ...bank.initialQuantity };\n  delete restQuantities[tokenTypeId];\n  return {\n    ...bank,\n    accepts,\n    initialQuantity: restQuantities,\n  };\n};\n","import { createMemo } from 'solid-js';\nimport { createStore } from 'solid-js/store';\n\nimport type { LessonDocument, LessonMaterialInventory } from '@monte/types';\n\nimport { createEmptyInventory } from '../inventory/index.js';\nimport { normalizeLessonDocumentTimelines } from '../lesson/index.js';\n\nconst cloneDocument = <T>(value: T): T => {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(value);\n  }\n  return JSON.parse(JSON.stringify(value)) as T;\n};\n\ninterface LessonEditorHistory {\n  past: LessonDocument[];\n  future: LessonDocument[];\n}\n\nexport type LessonEditorSelection =\n  | { kind: 'lesson' }\n  | { kind: 'segment'; segmentId: string }\n  | { kind: 'action'; segmentId: string; actionId: string }\n  | { kind: 'guided-step'; segmentId: string; stepId: string }\n  | { kind: 'practice-question'; segmentId: string; questionId: string }\n  | { kind: 'materials' };\n\nexport interface LessonEditorState {\n  activeLessonId?: string;\n  document?: LessonDocument;\n  initialDocument?: LessonDocument;\n  dirty: boolean;\n  status: 'idle' | 'ready' | 'saving';\n  lastSavedAt?: string;\n  error?: string;\n  history: LessonEditorHistory;\n  selection?: LessonEditorSelection;\n}\n\nconst HISTORY_LIMIT = 50;\n\nconst enqueuePast = (history: LessonEditorHistory, snapshot: LessonDocument): LessonEditorHistory => {\n  const nextPast = [...history.past, snapshot];\n  if (nextPast.length > HISTORY_LIMIT) {\n    nextPast.shift();\n  }\n  return {\n    past: nextPast,\n    future: [],\n  } satisfies LessonEditorHistory;\n};\n\nexport const createLessonEditor = () => {\n  const [state, setState] = createStore<LessonEditorState>({\n    dirty: false,\n    status: 'idle',\n    history: { past: [], future: [] },\n  });\n\n  const loadDocument = (document: LessonDocument) => {\n    const cloned = normalizeLessonDocumentTimelines(cloneDocument(document));\n    setState({\n      activeLessonId: cloned.lesson.id,\n      document: cloned,\n      initialDocument: cloneDocument(cloned),\n      dirty: false,\n      status: 'ready',\n      history: { past: [], future: [] },\n      error: undefined,\n      selection: undefined,\n      lastSavedAt: undefined,\n    });\n  };\n\n  const applyUpdate = (makeChange: (draft: LessonDocument) => void) => {\n    if (!state.document) return;\n    try {\n      const snapshot = cloneDocument(state.document);\n      const draft = normalizeLessonDocumentTimelines(cloneDocument(state.document));\n      makeChange(draft);\n      normalizeLessonDocumentTimelines(draft);\n      setState({\n        document: draft,\n        dirty: true,\n        history: enqueuePast(state.history, snapshot),\n        activeLessonId: draft.lesson.id,\n      });\n    } catch (error) {\n      console.error('Failed to apply lesson edit', error);\n      setState('error', 'Unable to apply changes.');\n    }\n  };\n\n  const select = (selection: LessonEditorSelection | undefined) => {\n    setState('selection', selection);\n  };\n\n  const undo = () => {\n    if (!state.document) return;\n    const nextPast = [...state.history.past];\n    if (nextPast.length === 0) return;\n    const previous = nextPast.pop()!;\n    const currentSnapshot = cloneDocument(state.document);\n    setState({\n      document: cloneDocument(previous),\n      dirty: true,\n      history: {\n        past: nextPast,\n        future: [currentSnapshot, ...state.history.future],\n      },\n    });\n  };\n\n  const redo = () => {\n    if (!state.document) return;\n    const [next, ...rest] = state.history.future;\n    if (!next) return;\n    const currentSnapshot = cloneDocument(state.document);\n    setState({\n      document: cloneDocument(next),\n      dirty: true,\n      history: {\n        past: [...state.history.past, currentSnapshot],\n        future: rest,\n      },\n    });\n  };\n\n  const canUndo = createMemo(() => state.history.past.length > 0);\n  const canRedo = createMemo(() => state.history.future.length > 0);\n\n  const beginSaving = () => {\n    setState({ status: 'saving', error: undefined });\n  };\n\n  const markSaved = (timestamp?: string) => {\n    if (state.document) {\n      setState({\n        initialDocument: cloneDocument(state.document),\n        dirty: false,\n        status: 'ready',\n        lastSavedAt: timestamp ?? new Date().toISOString(),\n        history: { past: [], future: [] },\n      });\n    } else {\n      setState({ dirty: false, status: 'ready', lastSavedAt: timestamp });\n    }\n  };\n\n  const resetToInitial = () => {\n    if (!state.initialDocument) return;\n    const cloned = cloneDocument(state.initialDocument);\n    setState({\n      document: cloned,\n      dirty: false,\n      history: { past: [], future: [] },\n      selection: undefined,\n      status: 'ready',\n    });\n  };\n\n  const setError = (message: string) => {\n    setState({ error: message, status: 'ready' });\n  };\n\n  const applyInventoryUpdate = (\n    mutate: (\n      inventory: LessonMaterialInventory,\n      draft: LessonDocument,\n    ) => LessonMaterialInventory,\n  ) => {\n    applyUpdate((draft) => {\n      const currentInventory = draft.lesson.materialInventory ?? createEmptyInventory();\n      draft.lesson.materialInventory = mutate(currentInventory, draft);\n    });\n  };\n\n  return {\n    state,\n    loadDocument,\n    applyUpdate,\n    undo,\n    redo,\n    canUndo,\n    canRedo,\n    beginSaving,\n    markSaved,\n    resetToInitial,\n    select,\n    setError,\n    applyInventoryUpdate,\n  } as const;\n};\n\nexport type LessonEditor = ReturnType<typeof createLessonEditor>;\n","import type { LessonMaterialInventory } from '@monte/types';\n\nexport const GOLDEN_BEADS_MATERIAL_ID = 'golden-beads';\n\ntype SceneNode = NonNullable<LessonMaterialInventory['sceneNodes']>[number];\n\ntype SceneNodeTemplate = Omit<SceneNode, 'transform'> & {\n  transform: NonNullable<SceneNode['transform']>;\n};\n\nconst template: SceneNodeTemplate[] = [\n  {\n    id: 'tray-base',\n    materialId: 'golden-beads-tray',\n    label: 'Tray',\n    transform: {\n      position: { x: 0, y: 0 },\n      scale: { x: 3.6, y: 3.6 },\n    },\n  },\n  {\n    id: 'thousands-bank',\n    materialId: 'golden-beads-thousand',\n    label: '1000',\n    transform: {\n      position: { x: -180, y: -60 },\n      scale: { x: 3.2, y: 3.2 },\n    },\n  },\n  {\n    id: 'hundreds-bank',\n    materialId: 'golden-beads-hundred',\n    label: '100',\n    transform: {\n      position: { x: -90, y: -60 },\n      scale: { x: 3.2, y: 3.2 },\n    },\n  },\n  {\n    id: 'tens-bank',\n    materialId: 'golden-beads-ten',\n    label: '10',\n    transform: {\n      position: { x: 0, y: -50 },\n      scale: { x: 3.4, y: 3.4 },\n    },\n  },\n  {\n    id: 'units-bank',\n    materialId: 'golden-beads-unit',\n    label: '1',\n    transform: {\n      position: { x: 110, y: -45 },\n      scale: { x: 3.8, y: 3.8 },\n    },\n  },\n  {\n    id: 'ribbon',\n    materialId: 'golden-beads-ribbon',\n    label: 'Ribbon',\n    transform: {\n      position: { x: -20, y: 100 },\n      scale: { x: 1.4, y: 1.4 },\n    },\n  },\n];\n\nconst cloneTransform = (transform: SceneNodeTemplate['transform']): SceneNodeTemplate['transform'] => ({\n  position: { ...transform.position },\n  rotation: transform.rotation,\n  scale: transform.scale ? { ...transform.scale } : undefined,\n  opacity: transform.opacity,\n});\n\nconst cloneNode = (node: SceneNodeTemplate): SceneNode => ({\n  ...node,\n  transform: cloneTransform(node.transform),\n  metadata: node.metadata ? { ...node.metadata } : undefined,\n});\n\nexport const buildGoldenBeadScene = (): SceneNode[] => template.map(cloneNode);\n\nexport type GoldenBeadSceneNode = ReturnType<typeof buildGoldenBeadScene>[number];\n","import type { LessonMaterialInventory } from '@monte/types';\n\nimport { GOLDEN_BEADS_MATERIAL_ID, buildGoldenBeadScene } from './goldenBeads.js';\n\nexport type ManipulativeSceneNode = NonNullable<LessonMaterialInventory['sceneNodes']>[number];\n\nexport interface ManipulativeDefinition {\n  id: string;\n  buildScene: () => ManipulativeSceneNode[];\n}\n\nconst registry = new Map<string, ManipulativeDefinition>();\nregistry.set(GOLDEN_BEADS_MATERIAL_ID, {\n  id: GOLDEN_BEADS_MATERIAL_ID,\n  buildScene: buildGoldenBeadScene,\n});\n\nexport const getManipulativeDefinition = (id: string) => registry.get(id);\nexport const listManipulativeDefinitions = () => Array.from(registry.values());\n\n// Backwards-compatible aliases while downstream code migrates to the new API.\nexport const getManipulativeManifest = getManipulativeDefinition;\nexport const listManipulativeManifests = listManipulativeDefinitions;\n","import type {\n  GuidedEvaluatorId,\n  GuidedStep,\n  PracticePassCriteria,\n  PracticeQuestion,\n  PresentationAction,\n  PresentationActionInput,\n  PresentationScript,\n} from '@monte/types';\n\nexport interface GoldenBeadScenario {\n  kind: 'golden-beads';\n  seed: number;\n  multiplicand: number;\n  multiplier: number;\n  digits: {\n    thousands: number;\n    hundreds: number;\n    tens: number;\n    units: number;\n  };\n  unitTotal: number;\n  unitRemainder: number;\n  unitCarry: number;\n  tensTotal: number;\n  tensRemainder: number;\n  tensCarry: number;\n  hundredsTotal: number;\n  hundredsRemainder: number;\n  hundredsCarry: number;\n  thousandsTotal: number;\n  product: number;\n}\n\nexport interface StampGameScenario {\n  kind: 'stamp-game';\n  seed: number;\n  multiplicand: number;\n  multiplier: number;\n  digits: {\n    hundreds: number;\n    tens: number;\n    units: number;\n  };\n  unitsTotal: number;\n  unitsRemainder: number;\n  unitsCarry: number;\n  tensTotal: number;\n  tensRemainder: number;\n  tensCarry: number;\n  hundredsTotal: number;\n  hundredsRemainder: number;\n  hundredsCarry: number;\n  thousandsTotal: number;\n  product: number;\n}\n\nconst createSeededRng = (seed: number) => {\n  let t = seed >>> 0;\n  return () => {\n    t += 0x6d2b79f5;\n    let x = t;\n    x = Math.imul(x ^ (x >>> 15), x | 1);\n    x ^= x + Math.imul(x ^ (x >>> 7), x | 61);\n    return ((x ^ (x >>> 14)) >>> 0) / 4294967296;\n  };\n};\n\nconst randomInclusive = (rand: () => number, min: number, max: number) =>\n  Math.floor(rand() * (max - min + 1)) + min;\n\nconst generateDigits = (rand: () => number) => {\n  const thousands = randomInclusive(rand, 1, 2); // Keep products within 4 digits\n  const hundreds = randomInclusive(rand, 1, 4);\n  const tens = randomInclusive(rand, 2, 8);\n  const units = randomInclusive(rand, 2, 9);\n  return { thousands, hundreds, tens, units };\n};\n\nexport const generateGoldenBeadScenario = (seed?: number): GoldenBeadScenario => {\n  const baseSeed = seed ?? Math.floor(Math.random() * 1_000_000_000);\n  const rand = createSeededRng(baseSeed);\n\n  while (true) {\n    const digits = generateDigits(rand);\n    const multiplier = randomInclusive(rand, 2, 4);\n    const multiplicand = digits.thousands * 1000 + digits.hundreds * 100 + digits.tens * 10 + digits.units;\n\n    const unitTotal = digits.units * multiplier;\n    const unitCarry = Math.floor(unitTotal / 10);\n    const unitRemainder = unitTotal % 10;\n\n    const tensTotal = digits.tens * multiplier + unitCarry;\n    const tensCarry = Math.floor(tensTotal / 10);\n    const tensRemainder = tensTotal % 10;\n\n    const hundredsTotal = digits.hundreds * multiplier + tensCarry;\n    const hundredsCarry = Math.floor(hundredsTotal / 10);\n    const hundredsRemainder = hundredsTotal % 10;\n\n    const thousandsTotal = digits.thousands * multiplier + hundredsCarry;\n    if (thousandsTotal >= 10) {\n      continue; // avoid five-digit products\n    }\n\n    const product = multiplicand * multiplier;\n    const hasCarry = unitCarry > 0 || tensCarry > 0 || hundredsCarry > 0;\n    if (!hasCarry) {\n      continue; // ensure at least one exchange occurs\n    }\n\n    return {\n      kind: 'golden-beads',\n      seed: baseSeed,\n      multiplicand,\n      multiplier,\n      digits,\n      unitTotal,\n      unitRemainder,\n      unitCarry,\n      tensTotal,\n      tensRemainder,\n      tensCarry,\n      hundredsTotal,\n      hundredsRemainder,\n      hundredsCarry,\n      thousandsTotal,\n      product,\n    } satisfies GoldenBeadScenario;\n  }\n};\n\nexport const generateStampGameScenario = (seed?: number): StampGameScenario => {\n  const baseSeed = seed ?? Math.floor(Math.random() * 1_000_000_000);\n  const rand = createSeededRng(baseSeed);\n\n  while (true) {\n    const hundreds = randomInclusive(rand, 2, 5);\n    const tens = randomInclusive(rand, 2, 8);\n    const units = randomInclusive(rand, 1, 9);\n    const multiplier = randomInclusive(rand, 2, 5);\n    const digits = { hundreds, tens, units };\n    const multiplicand = hundreds * 100 + tens * 10 + units;\n\n    const unitsTotal = units * multiplier;\n    const unitsCarry = Math.floor(unitsTotal / 10);\n    const unitsRemainder = unitsTotal % 10;\n\n    const tensTotal = tens * multiplier + unitsCarry;\n    const tensCarry = Math.floor(tensTotal / 10);\n    const tensRemainder = tensTotal % 10;\n\n    const hundredsTotal = hundreds * multiplier + tensCarry;\n    const hundredsCarry = Math.floor(hundredsTotal / 10);\n    const hundredsRemainder = hundredsTotal % 10;\n\n    const thousandsTotal = hundredsCarry;\n    if (thousandsTotal >= 10) {\n      continue;\n    }\n\n    const product = multiplicand * multiplier;\n    const hasCarry = unitsCarry > 0 || tensCarry > 0 || hundredsCarry > 0;\n    if (!hasCarry) {\n      continue;\n    }\n\n    return {\n      kind: 'stamp-game',\n      seed: baseSeed,\n      multiplicand,\n      multiplier,\n      digits,\n      unitsTotal,\n      unitsRemainder,\n      unitsCarry,\n      tensTotal,\n      tensRemainder,\n      tensCarry,\n      hundredsTotal,\n      hundredsRemainder,\n      hundredsCarry,\n      thousandsTotal,\n      product,\n    } satisfies StampGameScenario;\n  }\n};\n\nconst formatNumber = (value: number) => value.toLocaleString();\n\nconst withActionIds = (\n  actions: readonly PresentationActionInput[],\n  prefix: string,\n): PresentationAction[] =>\n  actions.map((action, index) => ({\n    id: `${prefix}-${index + 1}`,\n    ...action,\n  }));\n\nexport const buildGoldenBeadPresentationScript = (scenario: GoldenBeadScenario): PresentationScript => {\n  const { digits, multiplier, unitTotal, unitRemainder, unitCarry, tensTotal, tensRemainder, tensCarry, hundredsTotal, hundredsRemainder, hundredsCarry, product } = scenario;\n  const multiplicandStr = formatNumber(scenario.multiplicand);\n  const multiplierStr = multiplier.toString();\n\n  const actionInputs = [\n    // Action 1: Write problem on paper (handwritten style font) to the side: 2344 x 3\n    { type: 'showCard', card: `${multiplicandStr} Ã— ${multiplierStr}`, position: 'paper' },\n    { type: 'narrate', text: `We will multiply ${multiplicandStr} by ${multiplierStr} using golden beads.` },\n\n    // Actions 2-5: Lay out 2000, then 300, then 40, then 4 stacked\n    { type: 'showCard', card: `${digits.thousands * 1000}`, position: 'multiplicand-stack' },\n    { type: 'showCard', card: `${digits.hundreds * 100}`, position: 'multiplicand-stack' },\n    { type: 'showCard', card: `${digits.tens * 10}`, position: 'multiplicand-stack' },\n    { type: 'showCard', card: `${digits.units}`, position: 'multiplicand-stack' },\n    { type: 'narrate', text: `Stack the thousand, hundred, ten, and unit cards to show ${multiplicandStr}.` },\n\n    // Actions 6-7: Put multiplier (3) below the 4, put x to left of 3\n    { type: 'showCard', card: multiplierStr, position: 'multiplier' },\n    { type: 'showCard', card: 'Ã—', position: 'paper' },\n\n    // Actions 8-11: Place beads for each place value left to right\n    { type: 'narrate', text: 'Lay out the golden beads to match each place value.' },\n    { type: 'placeBeads', place: 'thousand', quantity: digits.thousands, tray: 1 },\n    { type: 'placeBeads', place: 'hundred', quantity: digits.hundreds, tray: 1 },\n    { type: 'placeBeads', place: 'ten', quantity: digits.tens, tray: 1 },\n    { type: 'placeBeads', place: 'unit', quantity: digits.units, tray: 1 },\n\n    // Actions 12-13: Repeat 2nd and 3rd time to match multiplier\n    { type: 'narrate', text: `Repeat the layout a second time.` },\n    { type: 'duplicateTray', count: 2 },\n    { type: 'narrate', text: `Repeat the layout a third time.` },\n    { type: 'duplicateTray', count: 3 },\n\n    // Action 14: Put yellow multiplication ribbon down\n    { type: 'narrate', text: 'Lay a yellow ribbon beneath to signal multiplication.' },\n    { type: 'highlight', target: 'multiplication-ribbon', text: 'Place ribbon' },\n\n    // UNIT EXCHANGE - Step by step\n    { type: 'narrate', text: 'Move all unit beads below the yellow line.' },\n    { type: 'moveBeadsBelowLine', place: 'unit', totalCount: unitTotal },\n    \n    { type: 'narrate', text: 'Group the units into sets of ten.' },\n    { type: 'groupForExchange', place: 'unit', groupsOfTen: unitCarry, remainder: unitRemainder },\n    \n    { type: 'narrate', text: `Exchange ${unitCarry === 1 ? 'this group of 10 units' : `${unitCarry} groups of 10 units`} for ${unitCarry === 1 ? 'a ten bar' : `${unitCarry} ten bars`}.` },\n    { type: 'exchangeBeads', from: 'unit', to: 'ten', groupsOfTen: unitCarry },\n    \n    { type: 'narrate', text: `${unitRemainder} units remain.` },\n    { type: 'placeResultCard', place: 'unit', value: unitRemainder },\n    { type: 'showCard', card: `${unitRemainder}`, position: 'paper' },\n\n    // TEN EXCHANGE - Step by step\n    { type: 'narrate', text: 'Move all ten bars below the yellow line.' },\n    { type: 'moveBeadsBelowLine', place: 'ten', totalCount: tensTotal },\n    \n    { type: 'narrate', text: 'Group the tens into sets of ten.' },\n    { type: 'groupForExchange', place: 'ten', groupsOfTen: tensCarry, remainder: tensRemainder },\n    \n    { type: 'narrate', text: `Exchange ${tensCarry === 1 ? 'this group of 10 tens' : `${tensCarry} groups of 10 tens`} for ${tensCarry === 1 ? 'a hundred square' : `${tensCarry} hundred squares`}.` },\n    { type: 'exchangeBeads', from: 'ten', to: 'hundred', groupsOfTen: tensCarry },\n    \n    { type: 'narrate', text: `${tensRemainder} tens remain.` },\n    { type: 'placeResultCard', place: 'ten', value: tensRemainder },\n\n    // HUNDRED EXCHANGE - Step by step\n    { type: 'narrate', text: 'Move all hundred squares below the yellow line.' },\n    { type: 'moveBeadsBelowLine', place: 'hundred', totalCount: hundredsTotal },\n    \n    { type: 'narrate', text: 'Group the hundreds into sets of ten.' },\n    { type: 'groupForExchange', place: 'hundred', groupsOfTen: hundredsCarry, remainder: hundredsRemainder },\n    \n    { type: 'narrate', text: `Exchange ${hundredsCarry === 1 ? 'this group of 10 hundreds' : `${hundredsCarry} groups of 10 hundreds`} for ${hundredsCarry === 1 ? 'a thousand cube' : `${hundredsCarry} thousand cubes`}.` },\n    { type: 'exchangeBeads', from: 'hundred', to: 'thousand', groupsOfTen: hundredsCarry },\n    \n    { type: 'narrate', text: `${hundredsRemainder} hundreds remain.` },\n    { type: 'placeResultCard', place: 'hundred', value: hundredsRemainder },\n\n    // Final stacking and product\n    { type: 'narrate', text: 'Stack each place value to read the product.' },\n    { type: 'stackPlaceValues', order: ['thousand', 'hundred', 'ten', 'unit'] },\n    { type: 'writeResult', value: formatNumber(product) },\n    { type: 'narrate', text: `${multiplicandStr} multiplied by ${multiplierStr} equals ${formatNumber(product)}.` },\n  ] satisfies PresentationActionInput[];\n\n  const actions = withActionIds(actionInputs, 'presentation.multiplication.goldenBeads');\n\n  return {\n    id: 'presentation.multiplication.goldenBeads',\n    title: 'Golden Bead Staircase Multiplication',\n    summary: `Demonstrate ${multiplicandStr} Ã— ${multiplierStr} using golden beads, exchanges, and final stacking.`,\n    actions,\n  } satisfies PresentationScript;\n};\n\nexport const buildStampGamePresentationScript = (scenario: StampGameScenario): PresentationScript => {\n  const { digits, multiplier, unitsRemainder, tensRemainder, product } = scenario;\n  const multiplicandStr = formatNumber(scenario.multiplicand);\n  const multiplierStr = multiplier.toString();\n\n  const actionInputs = [\n    { type: 'narrate', text: `Let us multiply ${multiplicandStr} by ${multiplierStr} using the stamp game.` },\n    { type: 'showCard', card: multiplicandStr, position: 'paper' },\n    { type: 'showCard', card: multiplierStr, position: 'multiplier' },\n    { type: 'narrate', text: `Build one column with ${digits.hundreds} red hundreds, ${digits.tens} blue tens, and ${digits.units} green units.` },\n    { type: 'showStamp', stamp: '100', columns: 1, rows: digits.hundreds },\n    { type: 'showStamp', stamp: '10', columns: 1, rows: digits.tens },\n    { type: 'showStamp', stamp: '1', columns: 1, rows: digits.units },\n    { type: 'narrate', text: `Repeat this column ${multiplierStr} times for the multiplier.` },\n    { type: 'duplicateTray', count: multiplier },\n    { type: 'narrate', text: 'Gather the tiles and make exchanges: ten greens become a blue, ten blues become a red.' },\n    { type: 'exchange', from: 'unit', to: 'ten', quantity: 10, remainder: unitsRemainder },\n    { type: 'exchange', from: 'ten', to: 'hundred', quantity: 10, remainder: tensRemainder },\n    { type: 'countTotal', value: formatNumber(product) },\n    { type: 'narrate', text: `${multiplicandStr} times ${multiplierStr} equals ${formatNumber(product)}.` },\n  ] satisfies PresentationActionInput[];\n\n  const actions = withActionIds(actionInputs, 'presentation.multiplication.stampGame');\n\n  return {\n    id: 'presentation.multiplication.stampGame',\n    title: 'Stamp Game Multiplication Stories',\n    summary: `Show ${multiplicandStr} Ã— ${multiplierStr} on the stamp game with exchanges.`,\n    actions,\n  } satisfies PresentationScript;\n};\n\nexport const buildGoldenBeadGuidedSteps = (\n  scenario: GoldenBeadScenario,\n): (GuidedStep & { evaluatorId: GuidedEvaluatorId })[] => {\n  const multiplicandStr = formatNumber(scenario.multiplicand);\n  const productStr = formatNumber(scenario.product);\n  return [\n    {\n      id: 'step-build-base',\n      prompt: `Lay out ${multiplicandStr} with bead cards and matching quantities.`,\n      expectation: `${scenario.digits.thousands} thousands, ${scenario.digits.hundreds} hundreds, ${scenario.digits.tens} tens, ${scenario.digits.units} units.`,\n      successCheck: 'Cards and beads match the multiplicand.',\n      nudge: 'Check each place value: thousands, hundreds, tens, ones. Add missing bead bars.',\n      evaluatorId: 'golden-beads-build-base',\n    },\n    {\n      id: 'step-duplicate',\n      prompt: `Create the ${multiplicandStr} layout ${scenario.multiplier} times to match the multiplier.`,\n      expectation: `${scenario.multiplier} full copies separated by the ribbon.`,\n      successCheck: 'Correct number of full sets present.',\n      nudge: 'Use the yellow ribbon to separate each copy and confirm counts.',\n      evaluatorId: 'golden-beads-duplicate',\n    },\n    {\n      id: 'step-exchange-units',\n      prompt: 'Combine the units and exchange every 10 for a ten bar.',\n      expectation: `${scenario.unitRemainder} units remain with ${scenario.unitCarry} ten carried.`,\n      successCheck: 'Units reduced below ten with the carry recorded.',\n      nudge: 'Group ten unit beads, trade them for a ten bar, and place the ten on the tens column.',\n      evaluatorId: 'golden-beads-exchange-units',\n    },\n    {\n      id: 'step-exchange-tens',\n      prompt: 'Combine tens, exchanging groups of ten tens for a hundred.',\n      expectation: `${scenario.tensRemainder} tens remain with ${scenario.tensCarry} hundred carried.`,\n      successCheck: 'Tens consolidated with the carry noted.',\n      nudge: 'Bundle ten tens, trade for a hundred square, and move it to hundreds.',\n      evaluatorId: 'golden-beads-exchange-tens',\n    },\n    {\n      id: 'step-exchange-hundreds',\n      prompt: 'Combine hundreds, exchanging ten hundreds for a thousand.',\n      expectation: `${scenario.hundredsRemainder} hundreds remain with ${scenario.hundredsCarry} thousand carried.`,\n      successCheck: 'Hundreds consolidated with the carry noted.',\n      nudge: 'Gather ten hundreds, swap for a thousand cube, and add it to thousands.',\n      evaluatorId: 'golden-beads-exchange-hundreds',\n    },\n    {\n      id: 'step-stack-result',\n      prompt: 'Stack the final thousands, hundreds, tens, and units to read the product.',\n      expectation: `Result cards show ${productStr}.`,\n      successCheck: `Final stack equals ${productStr}.`,\n      nudge: 'Slide each place value pile to form the final number and read it aloud.',\n      evaluatorId: 'golden-beads-stack-result',\n    },\n  ];\n};\n\nexport const buildStampGameGuidedSteps = (\n  scenario: StampGameScenario,\n): (GuidedStep & { evaluatorId: GuidedEvaluatorId })[] => {\n  const multiplicandStr = formatNumber(scenario.multiplicand);\n  const productStr = formatNumber(scenario.product);\n  return [\n    {\n      id: 'step-build',\n      prompt: `Lay out ${multiplicandStr} using stamp tiles in a single column.`,\n      expectation: `${scenario.digits.hundreds} hundreds, ${scenario.digits.tens} tens, ${scenario.digits.units} units.`,\n      successCheck: 'Tiles match the multiplicand layout.',\n      nudge: 'Use red 100s on top, blue 10s beneath, green 1s at bottom.',\n      evaluatorId: 'stamp-game-build',\n    },\n    {\n      id: 'step-repeat-columns',\n      prompt: `Repeat the column ${scenario.multiplier} times for the multiplier.`,\n      expectation: `${scenario.multiplier} matching columns ready to combine.`,\n      successCheck: 'The correct number of columns is present.',\n      nudge: 'Count each column aloud as you copy to the right.',\n      evaluatorId: 'stamp-game-repeat-columns',\n    },\n    {\n      id: 'step-exchange',\n      prompt: 'Gather all tiles and exchange groups of ten for the next place value.',\n      expectation: `${scenario.unitsRemainder} units, ${scenario.tensRemainder} tens, ${scenario.hundredsRemainder} hundreds, plus ${scenario.thousandsTotal} thousands.`,\n      successCheck: 'Remaining tiles per place value are fewer than ten with carries recorded.',\n      nudge: 'Stack tiles by color, trade ten greens for a blue, ten blues for a red.',\n      evaluatorId: 'stamp-game-exchange',\n    },\n    {\n      id: 'step-read-result',\n      prompt: 'Count the final tiles to read the product aloud.',\n      expectation: `${productStr}.`,\n      successCheck: `Learner states ${productStr}.`,\n      nudge: 'Count hundreds first, then tens, then ones to gather the total.',\n      evaluatorId: 'stamp-game-read-result',\n    },\n  ];\n};\n\nconst uniqueProblems = (existing: PracticeQuestion[], candidate: PracticeQuestion) =>\n  !existing.some((entry) => entry.multiplicand === candidate.multiplicand && entry.multiplier === candidate.multiplier);\n\nconst randomGoldenProblem = (rand: () => number): PracticeQuestion => {\n  const digits = generateDigits(rand);\n  const multiplier = randomInclusive(rand, 2, 4);\n  const multiplicand = digits.thousands * 1000 + digits.hundreds * 100 + digits.tens * 10 + digits.units;\n  return {\n    id: `gb-${multiplicand}-${multiplier}`,\n    multiplicand,\n    multiplier,\n    prompt: `Solve ${formatNumber(multiplicand)} Ã— ${multiplier}.`,\n    correctAnswer: multiplicand * multiplier,\n    difficulty: multiplier <= 3 ? 'medium' : 'hard',\n  } satisfies PracticeQuestion;\n};\n\nconst randomStampProblem = (rand: () => number): PracticeQuestion => {\n  const hundreds = randomInclusive(rand, 2, 5);\n  const tens = randomInclusive(rand, 2, 8);\n  const units = randomInclusive(rand, 1, 9);\n  const multiplicand = hundreds * 100 + tens * 10 + units;\n  const multiplier = randomInclusive(rand, 2, 5);\n  return {\n    id: `sg-${multiplicand}-${multiplier}`,\n    multiplicand,\n    multiplier,\n    prompt: `Solve ${formatNumber(multiplicand)} Ã— ${multiplier}.`,\n    correctAnswer: multiplicand * multiplier,\n    difficulty: multiplier <= 3 ? 'medium' : 'hard',\n  } satisfies PracticeQuestion;\n};\n\nexport const buildGoldenBeadPractice = (scenario: GoldenBeadScenario): PracticeQuestion[] => {\n  const questions: PracticeQuestion[] = [\n    {\n      id: `gb-scenario-${scenario.seed}`,\n      multiplicand: scenario.multiplicand,\n      multiplier: scenario.multiplier,\n      prompt: `Solve ${formatNumber(scenario.multiplicand)} Ã— ${scenario.multiplier}.`,\n      correctAnswer: scenario.product,\n      difficulty: 'easy',\n    },\n  ];\n\n  const rand = createSeededRng(scenario.seed + 101);\n  while (questions.length < 5) {\n    const candidate = randomGoldenProblem(rand);\n    if (uniqueProblems(questions, candidate)) {\n      questions.push({ ...candidate, id: `gb-${scenario.seed}-${questions.length}` });\n    }\n  }\n\n  questions[1].difficulty = 'medium';\n  questions[2].difficulty = 'medium';\n  questions[3].difficulty = 'hard';\n  questions[4].difficulty = 'hard';\n\n  return questions;\n};\n\nexport const buildStampGamePractice = (scenario: StampGameScenario): PracticeQuestion[] => {\n  const questions: PracticeQuestion[] = [\n    {\n      id: `sg-scenario-${scenario.seed}`,\n      multiplicand: scenario.multiplicand,\n      multiplier: scenario.multiplier,\n      prompt: `Solve ${formatNumber(scenario.multiplicand)} Ã— ${scenario.multiplier}.`,\n      correctAnswer: scenario.product,\n      difficulty: 'easy',\n    },\n  ];\n\n  const rand = createSeededRng(scenario.seed + 211);\n  while (questions.length < 5) {\n    const candidate = randomStampProblem(rand);\n    if (uniqueProblems(questions, candidate)) {\n      questions.push({ ...candidate, id: `sg-${scenario.seed}-${questions.length}` });\n    }\n  }\n\n  questions[1].difficulty = 'medium';\n  questions[2].difficulty = 'medium';\n  questions[3].difficulty = 'hard';\n  questions[4].difficulty = 'hard';\n\n  return questions;\n};\n\nexport const goldenBeadPassCriteria: PracticePassCriteria = {\n  type: 'threshold',\n  firstCorrect: 2,\n  totalCorrect: 3,\n  maxMisses: 3,\n};\n\nexport const stampGamePassCriteria: PracticePassCriteria = {\n  type: 'threshold',\n  firstCorrect: 2,\n  totalCorrect: 3,\n  maxMisses: 3,\n};\n","import { z } from 'zod';\nimport { LessonDocumentSchema, type LessonDocument } from '@monte/types';\n\nconst LESSON_DOCUMENT_STORAGE_VERSION = 1;\n\nconst StoredLessonDocumentSchema: z.ZodType<{\n  version: number;\n  document: LessonDocument;\n}> = z.object({\n  version: z.literal(LESSON_DOCUMENT_STORAGE_VERSION),\n  document: LessonDocumentSchema,\n});\n\nexport const serializeLessonDocument = (document: LessonDocument): string =>\n  JSON.stringify({\n    version: LESSON_DOCUMENT_STORAGE_VERSION,\n    document,\n  });\n\nexport const deserializeLessonDocument = (raw: string): LessonDocument | undefined => {\n  const parsed = StoredLessonDocumentSchema.safeParse(JSON.parse(raw));\n  if (!parsed.success) {\n    return undefined;\n  }\n  return parsed.data.document;\n};\n","import { z } from 'zod';\n\nexport const PROGRESS_STORAGE_VERSION = 1;\n\nexport type TaskStatus = 'locked' | 'ready' | 'in-progress' | 'completed' | 'incorrect';\n\nexport interface LessonTaskState {\n  status: TaskStatus;\n  attempts: number;\n}\n\nexport interface LessonProgressState {\n  tasks: Record<string, LessonTaskState>;\n  orderedTaskIds: string[];\n}\n\nexport interface LessonAuthoringProgressState {\n  lessons: Record<string, LessonProgressState>;\n}\n\nconst TaskStatusSchema: z.ZodType<TaskStatus> = z.union([\n  z.literal('locked'),\n  z.literal('ready'),\n  z.literal('in-progress'),\n  z.literal('completed'),\n  z.literal('incorrect'),\n]);\nconst LessonTaskStateSchema: z.ZodType<LessonTaskState> = z.object({\n  status: TaskStatusSchema,\n  attempts: z.number(),\n});\nconst LessonProgressStateSchema: z.ZodType<LessonProgressState> = z.object({\n  tasks: z.record(LessonTaskStateSchema),\n  orderedTaskIds: z.array(z.string()),\n});\nconst LessonAuthoringProgressStateSchema: z.ZodType<LessonAuthoringProgressState> = z.object({\n  lessons: z.record(LessonProgressStateSchema),\n});\n\nconst StoredProgressSchema: z.ZodType<{\n  version: number;\n  state: LessonAuthoringProgressState;\n}> = z.object({\n  version: z.literal(PROGRESS_STORAGE_VERSION),\n  state: LessonAuthoringProgressStateSchema,\n});\n\nexport const serializeProgressState = (state: LessonAuthoringProgressState): string =>\n  JSON.stringify({\n    version: PROGRESS_STORAGE_VERSION,\n    state,\n  });\n\nexport const deserializeProgressState = (raw: string): LessonAuthoringProgressState | undefined => {\n  const parsed = StoredProgressSchema.safeParse(JSON.parse(raw));\n  if (!parsed.success) {\n    return undefined;\n  }\n  return parsed.data.state;\n};\n"],"mappings":";AAEA,IAAM,sBAAsB,OAAwB;AAAA,EAClD,SAAS;AAAA,EACT,OAAO,CAAC;AACV;AAEA,IAAM,yBAAyB,CAAC,cAC7B,UAAU,SAAS,CAAC,GAAG,IAAI,CAAC,UAAU;AAAA,EACrC,GAAG;AAAA,EACH,WAAW,KAAK,aAAa,CAAC;AAAA,EAC9B,cAAc,KAAK,gBAAgB,CAAC;AACtC,EAAE;AAEG,IAAM,2BAA2B,CAA0B,YAAkB;AAClF,QAAM,WAAW,QAAQ,YAAY,oBAAoB;AACzD,SAAO;AAAA,IACL,GAAG;AAAA,IACH,UAAU;AAAA,MACR,SAAS,SAAS,WAAW;AAAA,MAC7B,OAAO,SAAS;AAAA,MAChB,UAAU,SAAS;AAAA,MACnB,OAAO,uBAAuB,QAAQ;AAAA,IACxC;AAAA,EACF;AACF;AAEO,IAAM,mCAAmC,CAA2B,aAAmB;AAC5F,WAAS,OAAO,WAAW,SAAS,OAAO,SAAS,IAAI,CAAC,YAAY,yBAAyB,OAAO,CAAC;AACtG,SAAO;AACT;;;AC9BA,SAAS,QAAQ,qBAAqB;AAmBtC,IAAM,QAAQ,CAAC,OAAe,KAAa,QAAgB,KAAK,IAAI,KAAK,IAAI,OAAO,GAAG,GAAG,GAAG;AAEtF,IAAM,4BAA4B,CAAC,kBACxC,cAAc;AAAA,EACZ,OAAO,CAAC;AAAA,EAIR,IAAI;AAAA,EACJ,SAAS;AAAA,IACP,OAAO;AAAA,IACP,OAAO,KAAK,IAAI,eAAe,CAAC;AAAA,IAChC,QAAQ;AAAA,EACV;AAAA,EACA,SAAS;AAAA,EACT,QAAQ;AAAA,IACN,MAAM;AAAA,MACJ,OAAO,OAAO,OAAO,EAAE,QAAQ,OAAO,EAAE;AAAA,MACxC,IAAI;AAAA,QACF,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,OAAO,OAAO,OAAO,EAAE,QAAQ,UAAU,EAAE;AAAA,MAC3C,IAAI;AAAA,QACF,OAAO;AAAA,QACP,UAAU;AAAA,UACR;AAAA,YACE,OAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ,SAAS,KAAK,IAAI,QAAQ,QAAQ,GAAG,CAAC;AAAA,YACtE,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,YACE,QAAQ;AAAA,YACR,SAAS,OAAO,CAAC,EAAE,QAAQ,MAAM;AAC/B,oBAAM,YAAY,KAAK,IAAI,QAAQ,QAAQ,GAAG,CAAC;AAC/C,qBAAO;AAAA,gBACL,OAAO,KAAK,IAAI,QAAQ,QAAQ,GAAG,SAAS;AAAA,gBAC5C,QAAQ;AAAA,cACV;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AAAA,QACA,MAAM;AAAA,UACJ,QAAQ;AAAA,UACR,SAAS,OAAO,CAAC,EAAE,QAAQ,MAAM;AAC/B,kBAAM,YAAY,KAAK,IAAI,QAAQ,QAAQ,GAAG,CAAC;AAC/C,mBAAO;AAAA,cACL,OAAO,KAAK,IAAI,QAAQ,QAAQ,GAAG,SAAS;AAAA,cAC5C,QAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAAA,QACH;AAAA,QACA,MAAM;AAAA,UACJ,QAAQ;AAAA,UACR,SAAS,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,YAChC,OAAO,KAAK,IAAI,QAAQ,QAAQ,GAAG,CAAC;AAAA,YACpC,QAAQ;AAAA,UACV,EAAE;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,OAAO,OAAO,OAAO,EAAE,QAAQ,SAAS,EAAE;AAAA,MAC1C,IAAI;AAAA,QACF,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,OAAO,OAAO,OAAO,EAAE,QAAQ,YAAY,EAAE;AAAA,MAC7C,MAAM;AAAA,MACN,IAAI;AAAA,QACF,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EACA,IAAI;AAAA,IACF,WAAW;AAAA,MACT,QAAQ;AAAA,MACR,SAAS,OAAO,CAAC,EAAE,OAAO,QAAQ,MAAM;AACtC,YAAI,MAAM,SAAS,YAAa,QAAO,CAAC;AACxC,eAAO;AAAA,UACL,OAAO,MAAM,MAAM,OAAO,GAAG,KAAK,IAAI,QAAQ,QAAQ,GAAG,CAAC,CAAC;AAAA,UAC3D,QAAQ;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,MAAM;AAAA,MACJ,QAAQ;AAAA,MACR,SAAS,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,QAChC,OAAO,KAAK,IAAI,QAAQ,QAAQ,GAAG,CAAC;AAAA,QACpC,QAAQ;AAAA,MACV,EAAE;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,MACJ,QAAQ;AAAA,MACR,SAAS,OAAO,CAAC,EAAE,QAAQ,MAAM;AAC/B,cAAM,YAAY,KAAK,IAAI,QAAQ,QAAQ,GAAG,CAAC;AAC/C,eAAO;AAAA,UACL,OAAO,KAAK,IAAI,QAAQ,QAAQ,GAAG,SAAS;AAAA,UAC5C,QAAQ;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,MAAM;AAAA,MACJ,QAAQ;AAAA,MACR,SAAS,OAAO,OAAO,EAAE,QAAQ,OAAO,EAAE;AAAA,IAC5C;AAAA,EACF;AACF,CAAC;;;AC9GH,IAAM,mBAAmE;AAAA,EACvE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAM,WAAW,MAAM;AACrB,MAAI,OAAO,WAAW,eAAe,gBAAgB,QAAQ;AAC3D,WAAO,OAAO,WAAW;AAAA,EAC3B;AACA,SAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,GAAG,EAAE;AAC/C;AAEO,IAAM,aAAa,CAAC,WAAmB,GAAG,MAAM,IAAI,SAAS,EAAE,MAAM,GAAG,CAAC,CAAC;AAE1E,IAAM,2BAA2B,CACtC,MACA,KAAa,WAAW,UAAU,IAAI,EAAE,MACjB;AACvB,QAAM,SAAS;AAAA,IACb;AAAA,IACA,YAAY;AAAA,IACZ,WAAW;AAAA,EACb;AAEA,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO,EAAE,GAAG,QAAQ,MAAM,WAAW,MAAM,GAAG;AAAA,IAChD,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,UAAU;AAAA,QACV,MAAM;AAAA,MACR;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,IAAI;AAAA,QACJ,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,YAAY;AAAA,MACd;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,QACb,WAAW;AAAA,MACb;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,IAAI;AAAA,QACJ,aAAa;AAAA,MACf;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO;AAAA,MACT;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO,CAAC,GAAG,gBAAgB;AAAA,MAC7B;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,MAAM;AAAA,MACR;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,QACT,MAAM;AAAA,MACR;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF,SAAS;AACP,YAAM,kBAAyB;AAC/B,YAAM,IAAI,MAAM,oCAAoC,eAAyB,EAAE;AAAA,IACjF;AAAA,EACF;AACF;AAEO,IAAM,0BAA0B,OAAyB;AAAA,EAC9D,IAAI,WAAW,UAAU;AAAA,EACzB,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,WAAW;AACb;AAEO,IAAM,sBAA4C;AAAA,EACvD,MAAM;AAAA,EACN,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AACb;AAEO,IAAM,oBAAoB,CAC/B,eAC6B;AAAA,EAC7B,IAAI,WAAW,MAAM;AAAA,EACrB,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,cAAc;AAAA,EACd,OAAO;AAAA,EACP,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAc,cAAc,eACxB,qBACA;AACN;AAEO,IAAM,gBAAgB,CAC3B,MACA,sBACsB;AACtB,QAAM,SAAS,WAAW,WAAW,IAAI,EAAE;AAE3C,MAAI,SAAS,gBAAgB;AAC3B,UAAMA,WAA+B;AAAA,MACnC,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,aAAa;AAAA,MACb,MAAM;AAAA,MACN,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,WAAW,CAAC;AAAA,MACZ,QAAQ,CAAC;AAAA,MACT,UAAU,UAAU,MAAM;AAAA,MAC1B,QAAQ;AAAA,QACN,IAAI,UAAU,MAAM;AAAA,QACpB,OAAO;AAAA,QACP,SAAS;AAAA,QACT,SAAS,CAAC,yBAAyB,SAAS,CAAC;AAAA,MAC/C;AAAA,MACA,UAAU,EAAE,MAAM,gBAAgB,MAAM,KAAK,IAAI,EAAE;AAAA,MACnD,gBAAgB;AAAA,MAChB,UAAU;AAAA,IACZ;AACA,WAAOA;AAAA,EACT;AAEA,MAAI,SAAS,UAAU;AACrB,UAAMA,WAAyB;AAAA,MAC7B,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,aAAa;AAAA,MACb,MAAM;AAAA,MACN,gBAAgB;AAAA,MAChB,WAAW,CAAC;AAAA,MACZ,QAAQ,CAAC;AAAA,MACT,WAAW;AAAA,MACX,OAAO,CAAC,kBAAkB,cAAc,CAAC;AAAA,MACzC,UAAU,EAAE,MAAM,gBAAgB,MAAM,KAAK,IAAI,EAAE;AAAA,MACnD,gBAAgB;AAAA,MAChB,UAAU;AAAA,IACZ;AACA,WAAOA;AAAA,EACT;AAEA,QAAM,UAA2B;AAAA,IAC/B,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,aAAa;AAAA,IACb,MAAM;AAAA,IACN,gBAAgB;AAAA,IAChB,WAAW,CAAC;AAAA,IACZ,QAAQ,CAAC;AAAA,IACT,WAAW;AAAA,IACX,WAAW,CAAC,wBAAwB,CAAC;AAAA,IACrC,cAAc,EAAE,GAAG,oBAAoB;AAAA,IACvC,UAAU,EAAE,MAAM,gBAAgB,MAAM,KAAK,IAAI,EAAE;AAAA,IACnD,gBAAgB;AAAA,IAChB,UAAU;AAAA,EACZ;AACA,SAAO;AACT;AAEO,IAAM,2BAA2B,CAAC,YAAqD;AAC5F,MAAI,CAAC,QAAQ,QAAQ;AACnB,YAAQ,SAAS;AAAA,MACf,IAAI,QAAQ,YAAY,UAAU,QAAQ,EAAE;AAAA,MAC5C,OAAO,QAAQ;AAAA,MACf,SAAS;AAAA,MACT,SAAS,CAAC;AAAA,IACZ;AAAA,EACF;AACA,SAAO,QAAQ;AACjB;AAEO,IAAM,mBAAmB,CAC9B,UACA,eAA8C,mBACpB;AAC1B,MAAI,CAAC,UAAU;AACb,WAAO,EAAE,MAAM,cAAc,MAAM,KAAK,IAAI,EAAE;AAAA,EAChD;AACA,SAAO;AACT;;;ACjPA,IAAMC,YAAW,MAAM;AACrB,MAAI,OAAO,WAAW,eAAe,gBAAgB,QAAQ;AAC3D,WAAO,OAAO,WAAW;AAAA,EAC3B;AACA,SAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,GAAG,EAAE;AAC/C;AAEA,IAAM,sBAAsB,CAAC,WAAmB,GAAG,MAAM,IAAIA,UAAS,CAAC;AAEhE,IAAM,yBAAyB,CACpC,MACA,cACa;AACb,MAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,WAAO,KAAK;AAAA,EACd;AACA,SAAO,UAAU,WAAW,IAAI,CAAC,UAAU,MAAM,EAAE;AACrD;AAEA,IAAM,WAAW,CAAC,YAA6D;AAC7E,QAAM,MAA8B,CAAC;AACrC,UAAQ,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAChC,QAAI,GAAG,IAAI;AAAA,EACb,CAAC;AACD,SAAO;AACT;AAEA,IAAM,kBAAkB,CACtB,MACA,cACqB;AACrB,QAAM,WAAW,uBAAuB,MAAM,SAAS;AACvD,QAAM,kBAAkB,KAAK;AAC7B,MAAI;AACJ,MAAI,OAAO,oBAAoB,UAAU;AACvC,cAAU,SAAS,SAAS,IAAI,CAAC,OAAO,CAAC,IAAI,eAAe,CAAC,CAAC;AAAA,EAChE,OAAO;AACL,cAAU,EAAE,GAAG,gBAAgB;AAAA,EACjC;AAEA,WAAS,QAAQ,CAAC,OAAO;AACvB,QAAI,OAAO,QAAQ,EAAE,MAAM,UAAU;AACnC,cAAQ,EAAE,IAAI;AAAA,IAChB;AAAA,EACF,CAAC;AAED,SAAO;AAAA,IACL,WAAW,EAAE,GAAG,QAAQ;AAAA,IACxB;AAAA,EACF;AACF;AAEO,IAAM,oBAAoB,CAAC,cAA8D;AAC9F,QAAM,QAA0C,CAAC;AACjD,aAAW,QAAQ,UAAU,OAAO;AAClC,UAAM,KAAK,EAAE,IAAI,gBAAgB,MAAM,SAAS;AAAA,EAClD;AACA,SAAO,EAAE,MAAM;AACjB;AAEA,IAAM,kBAAkB,CAAC,WAA6B;AACpD,QAAM,UAAU,oBAAI,IAUlB;AAEF,aAAW,SAAS,QAAQ;AAC1B,QAAI,CAAC,MAAM,OAAQ;AACnB,QAAI,MAAM,WAAW,SAAS;AAC5B,cAAQ,OAAO,MAAM,MAAM;AAC3B;AAAA,IACF;AACA,QAAI,MAAM,gBAAgB,IAAK;AAC/B,QAAI,cAAc,QAAQ,IAAI,MAAM,MAAM;AAC1C,QAAI,CAAC,aAAa;AAChB,oBAAc,oBAAI,IAAI;AACtB,cAAQ,IAAI,MAAM,QAAQ,WAAW;AAAA,IACvC;AACA,UAAM,QACJ,YAAY,IAAI,MAAM,WAAW,KAAK;AAAA,MACpC,KAAK;AAAA,MACL,UAAU;AAAA,MACV,aAAa;AAAA,IACf;AACF,UAAM,OAAO,MAAM;AACnB,QAAI,MAAM,WAAW,WAAW;AAC9B,YAAM,YAAY,KAAK,IAAI,MAAM,KAAK;AAAA,IACxC,WAAW,MAAM,WAAW,aAAa;AACvC,YAAM,eAAe,KAAK,IAAI,MAAM,KAAK;AAAA,IAC3C;AACA,gBAAY,IAAI,MAAM,aAAa,KAAK;AAAA,EAC1C;AAEA,SAAO;AACT;AASO,IAAM,mCAAmC,CAC9C,WACA,SACA,WACuB;AACvB,QAAM,SAA6B,CAAC;AACpC,QAAM,eAAe,gBAAgB,MAAM;AAE3C,aAAW,QAAQ,UAAU,OAAO;AAClC,UAAM,cAAc,QAAQ,MAAM,KAAK,EAAE;AACzC,QAAI,CAAC,YAAa;AAClB,UAAM,iBAAiB,oBAAI,IAAY;AAAA,MACrC,GAAG,OAAO,KAAK,YAAY,OAAO;AAAA,MAClC,GAAG,OAAO,KAAK,YAAY,SAAS;AAAA,IACtC,CAAC;AACD,UAAM,WAAW,uBAAuB,MAAM,SAAS;AACvD,aAAS,QAAQ,CAAC,YAAY,eAAe,IAAI,OAAO,CAAC;AAEzD,UAAM,cAAc,aAAa,IAAI,KAAK,EAAE;AAE5C,eAAW,WAAW,gBAAgB;AACpC,YAAM,UAAU,YAAY,QAAQ,OAAO,KAAK;AAChD,YAAM,YAAY,YAAY,UAAU,OAAO,KAAK;AACpD,YAAM,MAAM,aAAa,IAAI,OAAO,GAAG,OAAO;AAC9C,YAAM,WAAW,UAAU;AAC3B,UAAI,cAAc,UAAU;AAC1B,eAAO,KAAK;AAAA,UACV,QAAQ,KAAK;AAAA,UACb,aAAa;AAAA,UACb;AAAA,UACA,QAAQ;AAAA,QACV,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEO,IAAM,6BAA6B,CAAC,UAA0B;AACnE,QAAM,YAAY,MAAM,OAAO;AAC/B,MAAI,CAAC,UAAW;AAChB,QAAM,eAAe,IAAI,IAAI,UAAU,WAAW,IAAI,CAAC,UAAU,MAAM,EAAE,CAAC;AAC1E,QAAM,aAAa,IAAI,IAAI,MAAM,OAAO,SAAS,IAAI,CAAC,YAAY,QAAQ,EAAE,CAAC;AAE7E,aAAW,QAAQ,UAAU,OAAO;AAClC,UAAM,cAAc,KAAK,QAAQ,SAAS,IAAI,KAAK,UAAU,MAAM,KAAK,YAAY;AACpF,eAAW,WAAW,aAAa;AACjC,UAAI,CAAC,aAAa,IAAI,OAAO,GAAG;AAC9B,cAAM,IAAI,MAAM,QAAQ,KAAK,EAAE,kCAAkC,OAAO,EAAE;AAAA,MAC5E;AAAA,IACF;AACA,QAAI,KAAK,UAAU,WAAW;AAC5B,UAAI,CAAC,KAAK,aAAa,CAAC,WAAW,IAAI,KAAK,SAAS,GAAG;AACtD,cAAM,IAAI,MAAM,QAAQ,KAAK,EAAE,+BAA+B,KAAK,aAAa,WAAW,EAAE;AAAA,MAC/F;AAAA,IACF;AAAA,EACF;AAEA,QAAM,UAAU,IAAI,IAAI,UAAU,MAAM,IAAI,CAAC,SAAS,KAAK,EAAE,CAAC;AAC9D,aAAW,WAAW,MAAM,OAAO,UAAU;AAC3C,QAAI,QAAQ,kBAAkB,CAAC,QAAQ,IAAI,QAAQ,cAAc,GAAG;AAClE,YAAM,IAAI,MAAM,WAAW,QAAQ,EAAE,4BAA4B,QAAQ,cAAc,EAAE;AAAA,IAC3F;AAAA,EACF;AACF;AAEO,IAAM,uBAAuB,OAAgC;AAAA,EAClE,SAAS;AAAA,EACT,YAAY,CAAC;AAAA,EACb,OAAO,CAAC;AACV;AAEO,IAAM,kBAAkB,CAC7B,aAEyB;AAAA,EACzB,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,GAAG;AACL;AAEA,IAAM,gBAAgB,CAAC,cAA4D;AACjF,MAAI,cAAc,cAAc;AAC9B,WAAO,EAAE,MAAM,SAAS,OAAO,EAAE;AAAA,EACnC;AACA,SAAO,EAAE,MAAM,QAAQ,OAAO,OAAO;AACvC;AAEO,IAAM,yBAAyB,CACpC,YACA,WACA,QAAQ,qBAER,gBAAgB;AAAA,EACd,IAAI,oBAAoB,OAAO;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ,cAAc,SAAS;AACjC,CAAC;AAEI,IAAM,qBAAqB,CAChC,aAE4B;AAAA,EAC5B,WAAW,QAAQ,UAAU,YAAY,QAAQ,aAAa,SAAY;AAAA,EAC1E,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,GAAG;AACL;AAEO,IAAM,4BAA4B,CAAC,WAQxC,mBAAmB;AAAA,EACjB,IAAI,oBAAoB,MAAM;AAAA,EAC9B,OAAO,OAAO,SAAS;AAAA,EACvB,OAAO,OAAO,SAAS;AAAA,EACvB,WAAW,OAAO,UAAU,YAAY,OAAO,YAAY;AAAA,EAC3D,YAAY,OAAO;AAAA,EACnB,SAAS,OAAO,WAAW,CAAC;AAAA,EAC5B,iBAAiB,OAAO,mBAAmB;AAC7C,CAAC;AAEI,IAAM,sBAAsB,CAAC,MAA8B,gBAAgC;AAChG,MAAI,OAAO,KAAK,oBAAoB,UAAU;AAC5C,WAAO,KAAK;AAAA,EACd;AACA,SAAO,KAAK,gBAAgB,WAAW,KAAK;AAC9C;AAEO,IAAM,sBAAsB,CACjC,MACA,gBAC2B;AAC3B,QAAM,UAAU,KAAK,QAAQ,OAAO,CAAC,OAAO,OAAO,WAAW;AAC9D,MAAI,OAAO,KAAK,oBAAoB,UAAU;AAC5C,WAAO,EAAE,GAAG,MAAM,QAAQ;AAAA,EAC5B;AACA,QAAM,iBAAiB,EAAE,GAAG,KAAK,gBAAgB;AACjD,SAAO,eAAe,WAAW;AACjC,SAAO;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA,iBAAiB;AAAA,EACnB;AACF;;;ACjSA,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAO5B,IAAM,gBAAgB,CAAI,UAAgB;AACxC,MAAI,OAAO,oBAAoB,YAAY;AACzC,WAAO,gBAAgB,KAAK;AAAA,EAC9B;AACA,SAAO,KAAK,MAAM,KAAK,UAAU,KAAK,CAAC;AACzC;AA2BA,IAAM,gBAAgB;AAEtB,IAAM,cAAc,CAAC,SAA8B,aAAkD;AACnG,QAAM,WAAW,CAAC,GAAG,QAAQ,MAAM,QAAQ;AAC3C,MAAI,SAAS,SAAS,eAAe;AACnC,aAAS,MAAM;AAAA,EACjB;AACA,SAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,EACX;AACF;AAEO,IAAM,qBAAqB,MAAM;AACtC,QAAM,CAAC,OAAO,QAAQ,IAAI,YAA+B;AAAA,IACvD,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE;AAAA,EAClC,CAAC;AAED,QAAM,eAAe,CAAC,aAA6B;AACjD,UAAM,SAAS,iCAAiC,cAAc,QAAQ,CAAC;AACvE,aAAS;AAAA,MACP,gBAAgB,OAAO,OAAO;AAAA,MAC9B,UAAU;AAAA,MACV,iBAAiB,cAAc,MAAM;AAAA,MACrC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE;AAAA,MAChC,OAAO;AAAA,MACP,WAAW;AAAA,MACX,aAAa;AAAA,IACf,CAAC;AAAA,EACH;AAEA,QAAM,cAAc,CAAC,eAAgD;AACnE,QAAI,CAAC,MAAM,SAAU;AACrB,QAAI;AACF,YAAM,WAAW,cAAc,MAAM,QAAQ;AAC7C,YAAM,QAAQ,iCAAiC,cAAc,MAAM,QAAQ,CAAC;AAC5E,iBAAW,KAAK;AAChB,uCAAiC,KAAK;AACtC,eAAS;AAAA,QACP,UAAU;AAAA,QACV,OAAO;AAAA,QACP,SAAS,YAAY,MAAM,SAAS,QAAQ;AAAA,QAC5C,gBAAgB,MAAM,OAAO;AAAA,MAC/B,CAAC;AAAA,IACH,SAAS,OAAO;AACd,cAAQ,MAAM,+BAA+B,KAAK;AAClD,eAAS,SAAS,0BAA0B;AAAA,IAC9C;AAAA,EACF;AAEA,QAAM,SAAS,CAAC,cAAiD;AAC/D,aAAS,aAAa,SAAS;AAAA,EACjC;AAEA,QAAM,OAAO,MAAM;AACjB,QAAI,CAAC,MAAM,SAAU;AACrB,UAAM,WAAW,CAAC,GAAG,MAAM,QAAQ,IAAI;AACvC,QAAI,SAAS,WAAW,EAAG;AAC3B,UAAM,WAAW,SAAS,IAAI;AAC9B,UAAM,kBAAkB,cAAc,MAAM,QAAQ;AACpD,aAAS;AAAA,MACP,UAAU,cAAc,QAAQ;AAAA,MAChC,OAAO;AAAA,MACP,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ,CAAC,iBAAiB,GAAG,MAAM,QAAQ,MAAM;AAAA,MACnD;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,OAAO,MAAM;AACjB,QAAI,CAAC,MAAM,SAAU;AACrB,UAAM,CAAC,MAAM,GAAG,IAAI,IAAI,MAAM,QAAQ;AACtC,QAAI,CAAC,KAAM;AACX,UAAM,kBAAkB,cAAc,MAAM,QAAQ;AACpD,aAAS;AAAA,MACP,UAAU,cAAc,IAAI;AAAA,MAC5B,OAAO;AAAA,MACP,SAAS;AAAA,QACP,MAAM,CAAC,GAAG,MAAM,QAAQ,MAAM,eAAe;AAAA,QAC7C,QAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,UAAU,WAAW,MAAM,MAAM,QAAQ,KAAK,SAAS,CAAC;AAC9D,QAAM,UAAU,WAAW,MAAM,MAAM,QAAQ,OAAO,SAAS,CAAC;AAEhE,QAAM,cAAc,MAAM;AACxB,aAAS,EAAE,QAAQ,UAAU,OAAO,OAAU,CAAC;AAAA,EACjD;AAEA,QAAM,YAAY,CAAC,cAAuB;AACxC,QAAI,MAAM,UAAU;AAClB,eAAS;AAAA,QACP,iBAAiB,cAAc,MAAM,QAAQ;AAAA,QAC7C,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,aAAa,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,QACjD,SAAS,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE;AAAA,MAClC,CAAC;AAAA,IACH,OAAO;AACL,eAAS,EAAE,OAAO,OAAO,QAAQ,SAAS,aAAa,UAAU,CAAC;AAAA,IACpE;AAAA,EACF;AAEA,QAAM,iBAAiB,MAAM;AAC3B,QAAI,CAAC,MAAM,gBAAiB;AAC5B,UAAM,SAAS,cAAc,MAAM,eAAe;AAClD,aAAS;AAAA,MACP,UAAU;AAAA,MACV,OAAO;AAAA,MACP,SAAS,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE;AAAA,MAChC,WAAW;AAAA,MACX,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAEA,QAAM,WAAW,CAAC,YAAoB;AACpC,aAAS,EAAE,OAAO,SAAS,QAAQ,QAAQ,CAAC;AAAA,EAC9C;AAEA,QAAM,uBAAuB,CAC3B,WAIG;AACH,gBAAY,CAAC,UAAU;AACrB,YAAM,mBAAmB,MAAM,OAAO,qBAAqB,qBAAqB;AAChF,YAAM,OAAO,oBAAoB,OAAO,kBAAkB,KAAK;AAAA,IACjE,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AC/LO,IAAM,2BAA2B;AAQxC,IAAM,WAAgC;AAAA,EACpC;AAAA,IACE,IAAI;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,WAAW;AAAA,MACT,UAAU,EAAE,GAAG,GAAG,GAAG,EAAE;AAAA,MACvB,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,IAC1B;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,WAAW;AAAA,MACT,UAAU,EAAE,GAAG,MAAM,GAAG,IAAI;AAAA,MAC5B,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,IAC1B;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,WAAW;AAAA,MACT,UAAU,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,MAC3B,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,IAC1B;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,WAAW;AAAA,MACT,UAAU,EAAE,GAAG,GAAG,GAAG,IAAI;AAAA,MACzB,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,IAC1B;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,WAAW;AAAA,MACT,UAAU,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,MAC3B,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,IAC1B;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,WAAW;AAAA,MACT,UAAU,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,MAC3B,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI;AAAA,IAC1B;AAAA,EACF;AACF;AAEA,IAAM,iBAAiB,CAAC,eAA+E;AAAA,EACrG,UAAU,EAAE,GAAG,UAAU,SAAS;AAAA,EAClC,UAAU,UAAU;AAAA,EACpB,OAAO,UAAU,QAAQ,EAAE,GAAG,UAAU,MAAM,IAAI;AAAA,EAClD,SAAS,UAAU;AACrB;AAEA,IAAM,YAAY,CAAC,UAAwC;AAAA,EACzD,GAAG;AAAA,EACH,WAAW,eAAe,KAAK,SAAS;AAAA,EACxC,UAAU,KAAK,WAAW,EAAE,GAAG,KAAK,SAAS,IAAI;AACnD;AAEO,IAAM,uBAAuB,MAAmB,SAAS,IAAI,SAAS;;;ACrE7E,IAAM,WAAW,oBAAI,IAAoC;AACzD,SAAS,IAAI,0BAA0B;AAAA,EACrC,IAAI;AAAA,EACJ,YAAY;AACd,CAAC;AAEM,IAAM,4BAA4B,CAAC,OAAe,SAAS,IAAI,EAAE;AACjE,IAAM,8BAA8B,MAAM,MAAM,KAAK,SAAS,OAAO,CAAC;AAGtE,IAAM,0BAA0B;AAChC,IAAM,4BAA4B;;;ACmCzC,IAAM,kBAAkB,CAAC,SAAiB;AACxC,MAAI,IAAI,SAAS;AACjB,SAAO,MAAM;AACX,SAAK;AACL,QAAI,IAAI;AACR,QAAI,KAAK,KAAK,IAAK,MAAM,IAAK,IAAI,CAAC;AACnC,SAAK,IAAI,KAAK,KAAK,IAAK,MAAM,GAAI,IAAI,EAAE;AACxC,aAAS,IAAK,MAAM,QAAS,KAAK;AAAA,EACpC;AACF;AAEA,IAAM,kBAAkB,CAAC,MAAoB,KAAa,QACxD,KAAK,MAAM,KAAK,KAAK,MAAM,MAAM,EAAE,IAAI;AAEzC,IAAM,iBAAiB,CAAC,SAAuB;AAC7C,QAAM,YAAY,gBAAgB,MAAM,GAAG,CAAC;AAC5C,QAAM,WAAW,gBAAgB,MAAM,GAAG,CAAC;AAC3C,QAAM,OAAO,gBAAgB,MAAM,GAAG,CAAC;AACvC,QAAM,QAAQ,gBAAgB,MAAM,GAAG,CAAC;AACxC,SAAO,EAAE,WAAW,UAAU,MAAM,MAAM;AAC5C;AAEO,IAAM,6BAA6B,CAAC,SAAsC;AAC/E,QAAM,WAAW,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,GAAa;AACjE,QAAM,OAAO,gBAAgB,QAAQ;AAErC,SAAO,MAAM;AACX,UAAM,SAAS,eAAe,IAAI;AAClC,UAAM,aAAa,gBAAgB,MAAM,GAAG,CAAC;AAC7C,UAAM,eAAe,OAAO,YAAY,MAAO,OAAO,WAAW,MAAM,OAAO,OAAO,KAAK,OAAO;AAEjG,UAAM,YAAY,OAAO,QAAQ;AACjC,UAAM,YAAY,KAAK,MAAM,YAAY,EAAE;AAC3C,UAAM,gBAAgB,YAAY;AAElC,UAAM,YAAY,OAAO,OAAO,aAAa;AAC7C,UAAM,YAAY,KAAK,MAAM,YAAY,EAAE;AAC3C,UAAM,gBAAgB,YAAY;AAElC,UAAM,gBAAgB,OAAO,WAAW,aAAa;AACrD,UAAM,gBAAgB,KAAK,MAAM,gBAAgB,EAAE;AACnD,UAAM,oBAAoB,gBAAgB;AAE1C,UAAM,iBAAiB,OAAO,YAAY,aAAa;AACvD,QAAI,kBAAkB,IAAI;AACxB;AAAA,IACF;AAEA,UAAM,UAAU,eAAe;AAC/B,UAAM,WAAW,YAAY,KAAK,YAAY,KAAK,gBAAgB;AACnE,QAAI,CAAC,UAAU;AACb;AAAA,IACF;AAEA,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,4BAA4B,CAAC,SAAqC;AAC7E,QAAM,WAAW,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,GAAa;AACjE,QAAM,OAAO,gBAAgB,QAAQ;AAErC,SAAO,MAAM;AACX,UAAM,WAAW,gBAAgB,MAAM,GAAG,CAAC;AAC3C,UAAM,OAAO,gBAAgB,MAAM,GAAG,CAAC;AACvC,UAAM,QAAQ,gBAAgB,MAAM,GAAG,CAAC;AACxC,UAAM,aAAa,gBAAgB,MAAM,GAAG,CAAC;AAC7C,UAAM,SAAS,EAAE,UAAU,MAAM,MAAM;AACvC,UAAM,eAAe,WAAW,MAAM,OAAO,KAAK;AAElD,UAAM,aAAa,QAAQ;AAC3B,UAAM,aAAa,KAAK,MAAM,aAAa,EAAE;AAC7C,UAAM,iBAAiB,aAAa;AAEpC,UAAM,YAAY,OAAO,aAAa;AACtC,UAAM,YAAY,KAAK,MAAM,YAAY,EAAE;AAC3C,UAAM,gBAAgB,YAAY;AAElC,UAAM,gBAAgB,WAAW,aAAa;AAC9C,UAAM,gBAAgB,KAAK,MAAM,gBAAgB,EAAE;AACnD,UAAM,oBAAoB,gBAAgB;AAE1C,UAAM,iBAAiB;AACvB,QAAI,kBAAkB,IAAI;AACxB;AAAA,IACF;AAEA,UAAM,UAAU,eAAe;AAC/B,UAAM,WAAW,aAAa,KAAK,YAAY,KAAK,gBAAgB;AACpE,QAAI,CAAC,UAAU;AACb;AAAA,IACF;AAEA,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,eAAe,CAAC,UAAkB,MAAM,eAAe;AAE7D,IAAM,gBAAgB,CACpB,SACA,WAEA,QAAQ,IAAI,CAAC,QAAQ,WAAW;AAAA,EAC9B,IAAI,GAAG,MAAM,IAAI,QAAQ,CAAC;AAAA,EAC1B,GAAG;AACL,EAAE;AAEG,IAAM,oCAAoC,CAAC,aAAqD;AACrG,QAAM,EAAE,QAAQ,YAAY,WAAW,eAAe,WAAW,WAAW,eAAe,WAAW,eAAe,mBAAmB,eAAe,QAAQ,IAAI;AACnK,QAAM,kBAAkB,aAAa,SAAS,YAAY;AAC1D,QAAM,gBAAgB,WAAW,SAAS;AAE1C,QAAM,eAAe;AAAA;AAAA,IAEnB,EAAE,MAAM,YAAY,MAAM,GAAG,eAAe,SAAM,aAAa,IAAI,UAAU,QAAQ;AAAA,IACrF,EAAE,MAAM,WAAW,MAAM,oBAAoB,eAAe,OAAO,aAAa,uBAAuB;AAAA;AAAA,IAGvG,EAAE,MAAM,YAAY,MAAM,GAAG,OAAO,YAAY,GAAI,IAAI,UAAU,qBAAqB;AAAA,IACvF,EAAE,MAAM,YAAY,MAAM,GAAG,OAAO,WAAW,GAAG,IAAI,UAAU,qBAAqB;AAAA,IACrF,EAAE,MAAM,YAAY,MAAM,GAAG,OAAO,OAAO,EAAE,IAAI,UAAU,qBAAqB;AAAA,IAChF,EAAE,MAAM,YAAY,MAAM,GAAG,OAAO,KAAK,IAAI,UAAU,qBAAqB;AAAA,IAC5E,EAAE,MAAM,WAAW,MAAM,4DAA4D,eAAe,IAAI;AAAA;AAAA,IAGxG,EAAE,MAAM,YAAY,MAAM,eAAe,UAAU,aAAa;AAAA,IAChE,EAAE,MAAM,YAAY,MAAM,QAAK,UAAU,QAAQ;AAAA;AAAA,IAGjD,EAAE,MAAM,WAAW,MAAM,sDAAsD;AAAA,IAC/E,EAAE,MAAM,cAAc,OAAO,YAAY,UAAU,OAAO,WAAW,MAAM,EAAE;AAAA,IAC7E,EAAE,MAAM,cAAc,OAAO,WAAW,UAAU,OAAO,UAAU,MAAM,EAAE;AAAA,IAC3E,EAAE,MAAM,cAAc,OAAO,OAAO,UAAU,OAAO,MAAM,MAAM,EAAE;AAAA,IACnE,EAAE,MAAM,cAAc,OAAO,QAAQ,UAAU,OAAO,OAAO,MAAM,EAAE;AAAA;AAAA,IAGrE,EAAE,MAAM,WAAW,MAAM,mCAAmC;AAAA,IAC5D,EAAE,MAAM,iBAAiB,OAAO,EAAE;AAAA,IAClC,EAAE,MAAM,WAAW,MAAM,kCAAkC;AAAA,IAC3D,EAAE,MAAM,iBAAiB,OAAO,EAAE;AAAA;AAAA,IAGlC,EAAE,MAAM,WAAW,MAAM,wDAAwD;AAAA,IACjF,EAAE,MAAM,aAAa,QAAQ,yBAAyB,MAAM,eAAe;AAAA;AAAA,IAG3E,EAAE,MAAM,WAAW,MAAM,6CAA6C;AAAA,IACtE,EAAE,MAAM,sBAAsB,OAAO,QAAQ,YAAY,UAAU;AAAA,IAEnE,EAAE,MAAM,WAAW,MAAM,oCAAoC;AAAA,IAC7D,EAAE,MAAM,oBAAoB,OAAO,QAAQ,aAAa,WAAW,WAAW,cAAc;AAAA,IAE5F,EAAE,MAAM,WAAW,MAAM,YAAY,cAAc,IAAI,2BAA2B,GAAG,SAAS,qBAAqB,QAAQ,cAAc,IAAI,cAAc,GAAG,SAAS,WAAW,IAAI;AAAA,IACtL,EAAE,MAAM,iBAAiB,MAAM,QAAQ,IAAI,OAAO,aAAa,UAAU;AAAA,IAEzE,EAAE,MAAM,WAAW,MAAM,GAAG,aAAa,iBAAiB;AAAA,IAC1D,EAAE,MAAM,mBAAmB,OAAO,QAAQ,OAAO,cAAc;AAAA,IAC/D,EAAE,MAAM,YAAY,MAAM,GAAG,aAAa,IAAI,UAAU,QAAQ;AAAA;AAAA,IAGhE,EAAE,MAAM,WAAW,MAAM,2CAA2C;AAAA,IACpE,EAAE,MAAM,sBAAsB,OAAO,OAAO,YAAY,UAAU;AAAA,IAElE,EAAE,MAAM,WAAW,MAAM,mCAAmC;AAAA,IAC5D,EAAE,MAAM,oBAAoB,OAAO,OAAO,aAAa,WAAW,WAAW,cAAc;AAAA,IAE3F,EAAE,MAAM,WAAW,MAAM,YAAY,cAAc,IAAI,0BAA0B,GAAG,SAAS,oBAAoB,QAAQ,cAAc,IAAI,qBAAqB,GAAG,SAAS,kBAAkB,IAAI;AAAA,IAClM,EAAE,MAAM,iBAAiB,MAAM,OAAO,IAAI,WAAW,aAAa,UAAU;AAAA,IAE5E,EAAE,MAAM,WAAW,MAAM,GAAG,aAAa,gBAAgB;AAAA,IACzD,EAAE,MAAM,mBAAmB,OAAO,OAAO,OAAO,cAAc;AAAA;AAAA,IAG9D,EAAE,MAAM,WAAW,MAAM,kDAAkD;AAAA,IAC3E,EAAE,MAAM,sBAAsB,OAAO,WAAW,YAAY,cAAc;AAAA,IAE1E,EAAE,MAAM,WAAW,MAAM,uCAAuC;AAAA,IAChE,EAAE,MAAM,oBAAoB,OAAO,WAAW,aAAa,eAAe,WAAW,kBAAkB;AAAA,IAEvG,EAAE,MAAM,WAAW,MAAM,YAAY,kBAAkB,IAAI,8BAA8B,GAAG,aAAa,wBAAwB,QAAQ,kBAAkB,IAAI,oBAAoB,GAAG,aAAa,iBAAiB,IAAI;AAAA,IACxN,EAAE,MAAM,iBAAiB,MAAM,WAAW,IAAI,YAAY,aAAa,cAAc;AAAA,IAErF,EAAE,MAAM,WAAW,MAAM,GAAG,iBAAiB,oBAAoB;AAAA,IACjE,EAAE,MAAM,mBAAmB,OAAO,WAAW,OAAO,kBAAkB;AAAA;AAAA,IAGtE,EAAE,MAAM,WAAW,MAAM,8CAA8C;AAAA,IACvE,EAAE,MAAM,oBAAoB,OAAO,CAAC,YAAY,WAAW,OAAO,MAAM,EAAE;AAAA,IAC1E,EAAE,MAAM,eAAe,OAAO,aAAa,OAAO,EAAE;AAAA,IACpD,EAAE,MAAM,WAAW,MAAM,GAAG,eAAe,kBAAkB,aAAa,WAAW,aAAa,OAAO,CAAC,IAAI;AAAA,EAChH;AAEA,QAAM,UAAU,cAAc,cAAc,yCAAyC;AAErF,SAAO;AAAA,IACL,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,SAAS,eAAe,eAAe,SAAM,aAAa;AAAA,IAC1D;AAAA,EACF;AACF;AAEO,IAAM,mCAAmC,CAAC,aAAoD;AACnG,QAAM,EAAE,QAAQ,YAAY,gBAAgB,eAAe,QAAQ,IAAI;AACvE,QAAM,kBAAkB,aAAa,SAAS,YAAY;AAC1D,QAAM,gBAAgB,WAAW,SAAS;AAE1C,QAAM,eAAe;AAAA,IACnB,EAAE,MAAM,WAAW,MAAM,mBAAmB,eAAe,OAAO,aAAa,yBAAyB;AAAA,IACxG,EAAE,MAAM,YAAY,MAAM,iBAAiB,UAAU,QAAQ;AAAA,IAC7D,EAAE,MAAM,YAAY,MAAM,eAAe,UAAU,aAAa;AAAA,IAChE,EAAE,MAAM,WAAW,MAAM,yBAAyB,OAAO,QAAQ,kBAAkB,OAAO,IAAI,mBAAmB,OAAO,KAAK,gBAAgB;AAAA,IAC7I,EAAE,MAAM,aAAa,OAAO,OAAO,SAAS,GAAG,MAAM,OAAO,SAAS;AAAA,IACrE,EAAE,MAAM,aAAa,OAAO,MAAM,SAAS,GAAG,MAAM,OAAO,KAAK;AAAA,IAChE,EAAE,MAAM,aAAa,OAAO,KAAK,SAAS,GAAG,MAAM,OAAO,MAAM;AAAA,IAChE,EAAE,MAAM,WAAW,MAAM,sBAAsB,aAAa,6BAA6B;AAAA,IACzF,EAAE,MAAM,iBAAiB,OAAO,WAAW;AAAA,IAC3C,EAAE,MAAM,WAAW,MAAM,yFAAyF;AAAA,IAClH,EAAE,MAAM,YAAY,MAAM,QAAQ,IAAI,OAAO,UAAU,IAAI,WAAW,eAAe;AAAA,IACrF,EAAE,MAAM,YAAY,MAAM,OAAO,IAAI,WAAW,UAAU,IAAI,WAAW,cAAc;AAAA,IACvF,EAAE,MAAM,cAAc,OAAO,aAAa,OAAO,EAAE;AAAA,IACnD,EAAE,MAAM,WAAW,MAAM,GAAG,eAAe,UAAU,aAAa,WAAW,aAAa,OAAO,CAAC,IAAI;AAAA,EACxG;AAEA,QAAM,UAAU,cAAc,cAAc,uCAAuC;AAEnF,SAAO;AAAA,IACL,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,SAAS,QAAQ,eAAe,SAAM,aAAa;AAAA,IACnD;AAAA,EACF;AACF;AAEO,IAAM,6BAA6B,CACxC,aACwD;AACxD,QAAM,kBAAkB,aAAa,SAAS,YAAY;AAC1D,QAAM,aAAa,aAAa,SAAS,OAAO;AAChD,SAAO;AAAA,IACL;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ,WAAW,eAAe;AAAA,MAClC,aAAa,GAAG,SAAS,OAAO,SAAS,eAAe,SAAS,OAAO,QAAQ,cAAc,SAAS,OAAO,IAAI,UAAU,SAAS,OAAO,KAAK;AAAA,MACjJ,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ,cAAc,eAAe,WAAW,SAAS,UAAU;AAAA,MACnE,aAAa,GAAG,SAAS,UAAU;AAAA,MACnC,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,aAAa,GAAG,SAAS,aAAa,sBAAsB,SAAS,SAAS;AAAA,MAC9E,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,aAAa,GAAG,SAAS,aAAa,qBAAqB,SAAS,SAAS;AAAA,MAC7E,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,aAAa,GAAG,SAAS,iBAAiB,yBAAyB,SAAS,aAAa;AAAA,MACzF,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,aAAa,qBAAqB,UAAU;AAAA,MAC5C,cAAc,sBAAsB,UAAU;AAAA,MAC9C,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,EACF;AACF;AAEO,IAAM,4BAA4B,CACvC,aACwD;AACxD,QAAM,kBAAkB,aAAa,SAAS,YAAY;AAC1D,QAAM,aAAa,aAAa,SAAS,OAAO;AAChD,SAAO;AAAA,IACL;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ,WAAW,eAAe;AAAA,MAClC,aAAa,GAAG,SAAS,OAAO,QAAQ,cAAc,SAAS,OAAO,IAAI,UAAU,SAAS,OAAO,KAAK;AAAA,MACzG,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ,qBAAqB,SAAS,UAAU;AAAA,MAChD,aAAa,GAAG,SAAS,UAAU;AAAA,MACnC,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,aAAa,GAAG,SAAS,cAAc,WAAW,SAAS,aAAa,UAAU,SAAS,iBAAiB,mBAAmB,SAAS,cAAc;AAAA,MACtJ,cAAc;AAAA,MACd,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA;AAAA,MACE,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,aAAa,GAAG,UAAU;AAAA,MAC1B,cAAc,kBAAkB,UAAU;AAAA,MAC1C,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAM,iBAAiB,CAAC,UAA8B,cACpD,CAAC,SAAS,KAAK,CAAC,UAAU,MAAM,iBAAiB,UAAU,gBAAgB,MAAM,eAAe,UAAU,UAAU;AAEtH,IAAM,sBAAsB,CAAC,SAAyC;AACpE,QAAM,SAAS,eAAe,IAAI;AAClC,QAAM,aAAa,gBAAgB,MAAM,GAAG,CAAC;AAC7C,QAAM,eAAe,OAAO,YAAY,MAAO,OAAO,WAAW,MAAM,OAAO,OAAO,KAAK,OAAO;AACjG,SAAO;AAAA,IACL,IAAI,MAAM,YAAY,IAAI,UAAU;AAAA,IACpC;AAAA,IACA;AAAA,IACA,QAAQ,SAAS,aAAa,YAAY,CAAC,SAAM,UAAU;AAAA,IAC3D,eAAe,eAAe;AAAA,IAC9B,YAAY,cAAc,IAAI,WAAW;AAAA,EAC3C;AACF;AAEA,IAAM,qBAAqB,CAAC,SAAyC;AACnE,QAAM,WAAW,gBAAgB,MAAM,GAAG,CAAC;AAC3C,QAAM,OAAO,gBAAgB,MAAM,GAAG,CAAC;AACvC,QAAM,QAAQ,gBAAgB,MAAM,GAAG,CAAC;AACxC,QAAM,eAAe,WAAW,MAAM,OAAO,KAAK;AAClD,QAAM,aAAa,gBAAgB,MAAM,GAAG,CAAC;AAC7C,SAAO;AAAA,IACL,IAAI,MAAM,YAAY,IAAI,UAAU;AAAA,IACpC;AAAA,IACA;AAAA,IACA,QAAQ,SAAS,aAAa,YAAY,CAAC,SAAM,UAAU;AAAA,IAC3D,eAAe,eAAe;AAAA,IAC9B,YAAY,cAAc,IAAI,WAAW;AAAA,EAC3C;AACF;AAEO,IAAM,0BAA0B,CAAC,aAAqD;AAC3F,QAAM,YAAgC;AAAA,IACpC;AAAA,MACE,IAAI,eAAe,SAAS,IAAI;AAAA,MAChC,cAAc,SAAS;AAAA,MACvB,YAAY,SAAS;AAAA,MACrB,QAAQ,SAAS,aAAa,SAAS,YAAY,CAAC,SAAM,SAAS,UAAU;AAAA,MAC7E,eAAe,SAAS;AAAA,MACxB,YAAY;AAAA,IACd;AAAA,EACF;AAEA,QAAM,OAAO,gBAAgB,SAAS,OAAO,GAAG;AAChD,SAAO,UAAU,SAAS,GAAG;AAC3B,UAAM,YAAY,oBAAoB,IAAI;AAC1C,QAAI,eAAe,WAAW,SAAS,GAAG;AACxC,gBAAU,KAAK,EAAE,GAAG,WAAW,IAAI,MAAM,SAAS,IAAI,IAAI,UAAU,MAAM,GAAG,CAAC;AAAA,IAChF;AAAA,EACF;AAEA,YAAU,CAAC,EAAE,aAAa;AAC1B,YAAU,CAAC,EAAE,aAAa;AAC1B,YAAU,CAAC,EAAE,aAAa;AAC1B,YAAU,CAAC,EAAE,aAAa;AAE1B,SAAO;AACT;AAEO,IAAM,yBAAyB,CAAC,aAAoD;AACzF,QAAM,YAAgC;AAAA,IACpC;AAAA,MACE,IAAI,eAAe,SAAS,IAAI;AAAA,MAChC,cAAc,SAAS;AAAA,MACvB,YAAY,SAAS;AAAA,MACrB,QAAQ,SAAS,aAAa,SAAS,YAAY,CAAC,SAAM,SAAS,UAAU;AAAA,MAC7E,eAAe,SAAS;AAAA,MACxB,YAAY;AAAA,IACd;AAAA,EACF;AAEA,QAAM,OAAO,gBAAgB,SAAS,OAAO,GAAG;AAChD,SAAO,UAAU,SAAS,GAAG;AAC3B,UAAM,YAAY,mBAAmB,IAAI;AACzC,QAAI,eAAe,WAAW,SAAS,GAAG;AACxC,gBAAU,KAAK,EAAE,GAAG,WAAW,IAAI,MAAM,SAAS,IAAI,IAAI,UAAU,MAAM,GAAG,CAAC;AAAA,IAChF;AAAA,EACF;AAEA,YAAU,CAAC,EAAE,aAAa;AAC1B,YAAU,CAAC,EAAE,aAAa;AAC1B,YAAU,CAAC,EAAE,aAAa;AAC1B,YAAU,CAAC,EAAE,aAAa;AAE1B,SAAO;AACT;AAEO,IAAM,yBAA+C;AAAA,EAC1D,MAAM;AAAA,EACN,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AACb;AAEO,IAAM,wBAA8C;AAAA,EACzD,MAAM;AAAA,EACN,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AACb;;;AC7gBA,SAAS,SAAS;AAClB,SAAS,4BAAiD;AAE1D,IAAM,kCAAkC;AAExC,IAAM,6BAGD,EAAE,OAAO;AAAA,EACZ,SAAS,EAAE,QAAQ,+BAA+B;AAAA,EAClD,UAAU;AACZ,CAAC;AAEM,IAAM,0BAA0B,CAAC,aACtC,KAAK,UAAU;AAAA,EACb,SAAS;AAAA,EACT;AACF,CAAC;AAEI,IAAM,4BAA4B,CAAC,QAA4C;AACpF,QAAM,SAAS,2BAA2B,UAAU,KAAK,MAAM,GAAG,CAAC;AACnE,MAAI,CAAC,OAAO,SAAS;AACnB,WAAO;AAAA,EACT;AACA,SAAO,OAAO,KAAK;AACrB;;;ACzBA,SAAS,KAAAC,UAAS;AAEX,IAAM,2BAA2B;AAkBxC,IAAM,mBAA0CA,GAAE,MAAM;AAAA,EACtDA,GAAE,QAAQ,QAAQ;AAAA,EAClBA,GAAE,QAAQ,OAAO;AAAA,EACjBA,GAAE,QAAQ,aAAa;AAAA,EACvBA,GAAE,QAAQ,WAAW;AAAA,EACrBA,GAAE,QAAQ,WAAW;AACvB,CAAC;AACD,IAAM,wBAAoDA,GAAE,OAAO;AAAA,EACjE,QAAQ;AAAA,EACR,UAAUA,GAAE,OAAO;AACrB,CAAC;AACD,IAAM,4BAA4DA,GAAE,OAAO;AAAA,EACzE,OAAOA,GAAE,OAAO,qBAAqB;AAAA,EACrC,gBAAgBA,GAAE,MAAMA,GAAE,OAAO,CAAC;AACpC,CAAC;AACD,IAAM,qCAA8EA,GAAE,OAAO;AAAA,EAC3F,SAASA,GAAE,OAAO,yBAAyB;AAC7C,CAAC;AAED,IAAM,uBAGDA,GAAE,OAAO;AAAA,EACZ,SAASA,GAAE,QAAQ,wBAAwB;AAAA,EAC3C,OAAO;AACT,CAAC;AAEM,IAAM,yBAAyB,CAAC,UACrC,KAAK,UAAU;AAAA,EACb,SAAS;AAAA,EACT;AACF,CAAC;AAEI,IAAM,2BAA2B,CAAC,QAA0D;AACjG,QAAM,SAAS,qBAAqB,UAAU,KAAK,MAAM,GAAG,CAAC;AAC7D,MAAI,CAAC,OAAO,SAAS;AACnB,WAAO;AAAA,EACT;AACA,SAAO,OAAO,KAAK;AACrB;","names":["segment","randomId","z"]}