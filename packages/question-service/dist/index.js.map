{"version":3,"sources":["../src/runtime/service.ts"],"sourcesContent":["import { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { z } from 'zod';\n\nexport type QuestionContext = 'lesson' | 'drill' | 'quiz';\n\nexport interface GenerateOptions {\n  skillIds: string[];\n  context: QuestionContext;\n  phase?: 'presentation' | 'guided' | 'independent';\n  mode?: 'mental-math' | 'mastery' | 'fluency';\n  limit?: number;\n  shuffle?: boolean;\n}\n\nexport interface QuestionItem {\n  prompt: string;\n  answer: string | number;\n  difficulty: 'easy' | 'medium' | 'hard';\n  skillId: string;\n  metadata?: Record<string, unknown>;\n}\n\nconst BaseQuestionItemSchema = z\n  .object({\n    prompt: z.string(),\n    answer: z.union([z.string(), z.number()]),\n    difficulty: z.enum(['easy', 'medium', 'hard']).optional(),\n    metadata: z.record(z.unknown()).optional(),\n  })\n  .strict();\ntype BaseQuestionItem = z.infer<typeof BaseQuestionItemSchema>;\n\nconst LessonBucketsSchema = z\n  .object({\n    presentation: z.array(BaseQuestionItemSchema).optional(),\n    guided: z.array(BaseQuestionItemSchema).optional(),\n    independent: z.array(BaseQuestionItemSchema).optional(),\n  })\n  .strict();\ntype LessonBuckets = z.infer<typeof LessonBucketsSchema>;\n\nconst DrillBucketsSchema = z\n  .object({\n    mentalMath: z.array(BaseQuestionItemSchema).optional(),\n  })\n  .strict();\ntype DrillBuckets = z.infer<typeof DrillBucketsSchema>;\n\nconst QuizBucketsSchema = z\n  .object({\n    mastery: z.array(BaseQuestionItemSchema).optional(),\n    fluency: z.array(BaseQuestionItemSchema).optional(),\n  })\n  .strict();\ntype QuizBuckets = z.infer<typeof QuizBucketsSchema>;\n\nconst SkillQuestionBankSchema = z\n  .object({\n    lesson: LessonBucketsSchema.optional(),\n    drill: DrillBucketsSchema.optional(),\n    quiz: QuizBucketsSchema.optional(),\n  })\n  .strict();\ntype SkillQuestionBank = z.infer<typeof SkillQuestionBankSchema>;\n\nconst DIFFICULTY_FALLBACK: QuestionItem['difficulty'] = 'medium';\nconst QUESTIONS_DIR = path.resolve(\n  path.dirname(fileURLToPath(import.meta.url)),\n  '../../questions'\n);\n\nconst bankCache = new Map<string, SkillQuestionBank | null>();\n\nasync function loadQuestionBank(skillId: string): Promise<SkillQuestionBank | null> {\n  if (bankCache.has(skillId)) {\n    return bankCache.get(skillId) ?? null;\n  }\n\n  const filePath = path.join(QUESTIONS_DIR, `${skillId}.json`);\n  try {\n    const raw = await fs.readFile(filePath, 'utf-8');\n    const parsed = SkillQuestionBankSchema.parse(JSON.parse(raw));\n    bankCache.set(skillId, parsed);\n    return parsed;\n  } catch (error: unknown) {\n    if ((error as NodeJS.ErrnoException)?.code !== 'ENOENT') {\n      console.warn(\n        `[question-service] Failed to load question bank for skill ${skillId}`,\n        error,\n      );\n    }\n    bankCache.set(skillId, null);\n    return null;\n  }\n}\n\nfunction normalizeItems(items: BaseQuestionItem[] | undefined, skillId: string): QuestionItem[] {\n  if (!items?.length) {\n    return [];\n  }\n\n  return items.map((item) => ({\n    prompt: item.prompt,\n    answer: item.answer,\n    difficulty: item.difficulty ?? DIFFICULTY_FALLBACK,\n    skillId,\n    metadata: item.metadata,\n  }));\n}\n\nfunction takeRandom<T>(items: T[], count: number): T[] {\n  if (count >= items.length) {\n    return items;\n  }\n  const shuffled = [...items];\n  for (let i = shuffled.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled.slice(0, count);\n}\n\nexport interface QuestionService {\n  generate(options: GenerateOptions): Promise<QuestionItem[]>;\n  logResult(result: {\n    skillId: string;\n    context: QuestionContext;\n    difficulty: 'easy' | 'medium' | 'hard';\n    correct: boolean;\n    latencySec?: number;\n  }): Promise<void>;\n}\n\nexport const questionService: QuestionService = {\n  async generate(options) {\n    const { skillIds, context, mode, phase, limit, shuffle } = options;\n    if (!skillIds.length) {\n      return [];\n    }\n\n    const collected: QuestionItem[] = [];\n\n    for (const skillId of skillIds) {\n      const bank = await loadQuestionBank(skillId);\n      if (!bank) continue;\n\n      if (context === 'drill') {\n        const mentalItems = normalizeItems(bank.drill?.mentalMath, skillId);\n        collected.push(...mentalItems);\n      } else if (context === 'lesson') {\n        const bucket =\n          phase === 'presentation'\n            ? bank.lesson?.presentation\n            : phase === 'guided'\n            ? bank.lesson?.guided\n            : phase === 'independent'\n            ? bank.lesson?.independent\n            : undefined;\n        collected.push(...normalizeItems(bucket, skillId));\n      } else if (context === 'quiz') {\n        const quizBucket = mode === 'fluency' ? bank.quiz?.fluency : bank.quiz?.mastery;\n        collected.push(...normalizeItems(quizBucket, skillId));\n      }\n    }\n\n    const unique = new Map<string, QuestionItem>();\n    for (const item of collected) {\n      const key = `${item.skillId}:${item.prompt}:${item.answer}`;\n      if (!unique.has(key)) {\n        unique.set(key, item);\n      }\n    }\n    let results = Array.from(unique.values());\n\n    if (shuffle) {\n      results = takeRandom(results, limit ?? results.length);\n    } else if (typeof limit === 'number' && limit < results.length) {\n      results = results.slice(0, limit);\n    }\n\n    return results;\n  },\n\n  async logResult() {\n    // Intentionally a no-op for now. Expect future implementations to persist outcomes.\n    return;\n  },\n};\n\nexport default questionService;\n"],"mappings":"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","names":[]}